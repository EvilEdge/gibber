<h1 id="hat">Hat</h1>
<p>A synthesized hihat drum sound with a built-in sequencer. Consists of six detuned sequencers feeding split into separate bandpass and hipass filters.</p>
<p>Inherits from Ugen.</p>
<p>Example:</p>
<pre><code><span class="comment">// use random decays for each hihat hit  </span>
a = Hat().play( Rndi(<span class="number">1000</span>, <span class="number">11025</span>), <span class="number">1</span>/<span class="number">8</span> )</code></pre>
<h2 id="properties">Properties</h2>
<ul>
<li><em>decay</em> : Int. The length of the decay in samples. IMPORTANT NOTE: At some point this will change to a value between {0,1}, but for now you specify this in samples.</li>
<li><em>pitch</em> : Int. The base frequency for the square wave oscillators used to generate the hihat sound. Default is 325 Hz.</li>
<li><em>amp</em> : Float. default range { 0, 1 }. default value: .25.</li>
</ul>
<h2 id="methods">Methods</h2>
<ul>
<li><em>play</em>( Array:frequencies, Array:durations ) : This method accepts arrays of frequencies and durations as arguments to create and start a sequencer targeting the oscillator. </li>
<li><em>note</em>( Int:decay ) : The decay of the hihat hit. </li>
<li><em>stop</em>() : This method stops the sequencer that is built into the oscillator if it has been started.</li>
<li><em>kill</em>() : Disconnect the oscillator from whatever bus it is connected to. Note that if the oscillator is reference by another unit generator it will continue to feed output to it.</li>
</ul>
