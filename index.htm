<!DOCTYPE html>
<html>
	<head>
		<script src="js/audiolib.js"></script>
		<script src="js/gibber/gibber.js"></script>		
	    <script src="js/ace/ace.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/mode-javascript.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-twilight.js" type="text/javascript" charset="utf-8"></script>
		<script>
		window.onload	= function(){
	        var editor = ace.edit("editor");
		    var JavaScriptMode = require("ace/mode/javascript").Mode;
		    editor.getSession().setMode(new JavaScriptMode());
			editor.setTheme("ace/theme/twilight");
			editor.commands.addCommand({
			    name: 'evaluate',
			    bindKey: {
			        win: 'Ctrl-Return',
			        mac: 'Command-Return',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
			        var text = editor.getSession().doc.getTextRange(editor.getSelectionRange());
					if(text === "") {
						text = editor.getSession().getValue();
					}
					//window.alert(editor.getSession.getPosition());
					Gibber.runScript(text);
			    }
			});
			editor.commands.addCommand({
			    name: 'stop',
			    bindKey: {
			        win: 'Ctrl-.',
			        mac: 'Command-.',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
					Gibber.active = !Gibber.active;
					if(Gibber.active) console.log("audio on"); else console.log("audio off");
			    }
			});
			editor.commands.addCommand({
			    name: 'deleteGenerators',
			    bindKey: {
			        win: 'Ctrl-`',
			        mac: 'Command-`',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
					Gibber.clear();
			    }
			});
			
			editor.setShowPrintMargin(false);
				
			Gibber.init();
		};
		
		</script>
		<style>
		body { margin: 0}
		#editor {
		        position: absolute;
				margin: 0;
		        width: 100%;
		        height: 100%;
		    }
		</style>
	</head>
	<body>
		<div id="editor">// GIBBER --- try execting code one line at a time to hear results
// Ctrl-Return (Cmd-Return OSX) executes selected code. If no code is selected entire block is run.
// Cntrl/Cmd-. toggles the audio on and off
// Cntrl/Cmd-` clears all generators
    	
s = Sine(240, .5);                  // Create a sine wave at frequency 240, amplitude .5    
s.mod("freq", LFO(2,4), "+");  	    // offset the frequency by 10Hz with an LFO running at 4Hz
s.chain( Dist(), Reverb() );        // add some fx

step = Step( 250, [120, 240, 120, 360] ); 	// create a step sequencer. each step is 250 ms.
s.mod("freq", step, "=");	    	        // use step sequencer to assign freq of saw wave

/*
tri = Tri(240, .5)
    .mod( "freq", LFO(4,40) )
    .mod( "amp", LFO(1, .25) );     // mods can cascade
*/

Master.chain( Trunc(4) );           // Master FX are applied to summed signal of all generators
Master.clearFX();                   // clearFX also works with generators... try it on s</div>
	</body>
</html>

<!--
		<div id="editor">// Ctrl-Return (Cmd-Return OSX) executes selected code. If no code is selected entire block is run.
// Cntrl/Cmd-. toggles the audio on and off
// Cntrl/Cmd-` clears all generators
		
sine = Sine(240, .5); 					// Create a sine wave at frequency 240, amplitude .5
sine.mod("freq", LFO(4,10), "+");  		// offset the frequency by 10Hz with an LFO running at 4Hz

square = Square(120, .15);
freqs = [120, 240, 120, 360];

step = Step(250, freqs); 				// create a step sequencer. each step is 250 ms.

square.mod("freq", step, "=");	    	// use step sequencer to assign freq of saw wave
square.mod("amp", LFO(10, .15));  		// tremolo

tri = Tri(240, .5)
    .mod( "freq", LFO(4,40) )
    .mod( "amp", LFO(1, .25) );         // mods can cascade</div>



-->
