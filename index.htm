<!DOCTYPE html>
<html>
	<head>
		<title>Gibber</title>
		<script src="js/audiolib.js"></script>
		<script src="js/samples/drum-samples.js"></script>
		<script src="js/gibber/gibber.js"></script>
		<script src="js/gibber/chord.js"></script>								
		<script src="js/gibber/drums.js"></script>
		<script src="js/gibber/arpeggiator.js"></script>
		<script src="js/gibber/beatCallback.js"></script>
		<script src="js/gibber/environment.js"></script>
		<script src="js/gibber/audio_callback.js"></script>
		<script src="js/gibber/sequence.js"></script>		
		<script src="js/gibber/synth.js"></script>
		<script src="js/gibber/default_scripts.js"></script>

		
		<script src="js/ace/ace.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/mode-javascript.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-twilight.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-idle_fingers.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-textmate.js" type="text/javascript" charset="utf-8"></script>				
		<script src="js/ace/theme-solarized_light.js" type="text/javascript" charset="utf-8"></script>						
		<script src="js/ace/theme-chrome.js" type="text/javascript" charset="utf-8"></script>				
		
		<script src="js/jquery-1.5.js" type="text/javascript" charset="utf-8"></script>
		
		<link rel="stylesheet" href="css/main.css">
		
		<script>
		window.onload	= function(){
			Gibber.init();
		};
		</script>
	</head>
	<body>
		<div id="info">
			<h1>GIBBER  (beta)</h1>
			<div id="about" class="section">
				<h2>About <span class="aboutsection">show/hide</span></h2>
				<div class="aboutcontent">
				<p>
				Gibber is a JavaScript live coding environment with a relatively easy syntax. Gibber has only been tested in Chrome. The syntax is layered on top of the excellent <a href="https://github.com/jussi-kalliokoski/audiolib.js">audioLib.js library</a> by <a href="https://github.com/jussi-kalliokoski">Jussi Kalliokoski</a>. Gibber is open-source and <a href="https://github.com/charlieroberts/Gibber">available for download</a>.</p>
				<p>Other projects/code that contribute to Gibber:</p>
				<ul>
					<li><a href="http://ace.ajax.org/">Ace Code Editor</a></li>
					<li><a href="http://jquery.com">jQuery</a></li>
					<li><a href="http://www.benfarrell.com/2011/12/13/chords-and-arpeggiators-with-audiolib-js/">Chords and Notes from Ben Farrell</a></li>
				</ul>
				</div>
			</div>
			<div id="options" class="section">
				<h2>Options <span class="optionssection">show/hide</span></h2>
				<div class="optionscontent">
					Theme: <select id="theme" size="1" onchange="Gibber.Environment.Editor.setTheme(this.value);" style="margin-bottom:1em;">
					<option value="ace/theme/chrome">Chrome</option>
					<option value="ace/theme/idle_fingers" selected="selected">idleFingers</option>
					<option value="ace/theme/solarized_light">Solarized Light</option>
					<option value="ace/theme/textmate">TextMate</option>
					<option value="ace/theme/twilight">Twilight</option>
					</select><br>
					<button onclick="Gibber.saveFile()">Save File</button>
					load file:<select id="fileList" size="1" onchange="Gibber.Environment.loadAndSet(this.value);" style="margin-bottom:1em;">
					</select><br>
					<!--<button onclick="Gibber.loadFile()">Load File</button><br>-->
					<button onclick="editor.renderer.setShowGutter(!Gibber.Environment.Editor.renderer.getShowGutter())">Toggle Line Numbers</button>
					
				</div>
			</div>
		
			<div id="reference" class="section">
				<h2>Key Commands <span class="referencesection">show/hide</span></h2>

				<div class="referencecontent">
					<ul>
					<li><pre>Ctrl-Return (Cmd-Return OSX)</pre> executes selected code. If no code is selected current line of the cursor is run.</li>
					<li><pre>Ctrl/Cmd-Shift-Return</pre> executes code at the start of the next measure. </li>
					<li><pre>Ctrl/Cmd-Shift-Alt/Option-Return</pre> executes code at the start of the next beat.</li>										
					<li><pre>Ctrl/Cmd .</pre> toggles the audio on and off</li>
					<li><pre>Ctrl/Cmd `</pre> clears all generators, use this to start over without refreshing and losing your code</li>
					<li><pre>Ctrl/Cmd +- </pre>change font size up and down.</li>
					<li><pre>Ctrl/Cmd-I </pre>Hide this info panel.</li>					
					</ul>
				</div>
			</div>
		</div>
		
		<div id="editor">Gibber.setBPM(180);     // default = 120. You can also refer to Gibber as _g.

s = Sine(240, .15);      // Sine wave with freq 240, amp .5.

s.chain(                // create an fx chain for oscillator                   
    Dist(),             // Distortion
    Delay( _3 )  		// Delay with delay time set to 1/4 of a beat (1/16th note)
);

a = Arp(s, "Cm7", 2, _16, "updown"); // Arpeggiator: Cminor7 chord, 2nd octave, 16th notes, up then down

d = Drums("x*o*x*o*",_8);
d.chain( Trunc(6) );
d.frequency = 880; 	// 440 is base frequency

s.mod("freq", LFO(8, 4), "+");  // Vibrato - modulating frequency by +/- 4Hz 8 times per second
s.removeMod(1);                 // mod 0 is the arp, I know, confusing...

a.shuffle();        // randomize arpeggio
a.reset();          // reset arpeggio

Master.chain( Reverb() );     // Master FX are applied to summed signal of all generators
Master.removeFX(0);           // remove first effect in chain. don't pass a argument to remove all fx.</div>

		
	</body>
</html>

<!--
				<h3>Generators</h3>
				<p>All generators(oscillators) accept two parameters in their constructor: frequency and amplitude. The amplitude default is .25, but you have to enter a frequency. The available generators are Sine, Square, Saw, Tri(Triangle), Pulse and LFO.</p>
				Methods:
				<ul>
					<li>mod(str:parameterName, obj:modSource, str:type) : parameterName is the parameter you'd like to modulate. Common options are "frequency" (or "freq") and "amp". modSource is another object such as an LFO or a StepSequencer whose output will change the parameter in question. Modes determine how the parameter is changed. "+" adds the output of the modulator to the paramter, "*" multiples, "++" adds the absolute value of the modulator and "=" assigns the value of the modulator to the parameter; the default is "+"; Vibrato Example:<pre>s = Sine(400); s.mod("freq", LFO(4, 2), "+");</pre></li>
				</ul>

-->