<!DOCTYPE html>
<html>
	<head>
		<script src="js/audiolib.js"></script>
		<script src="js/gibber/gibber.js"></script>		
	    <script src="js/ace/ace.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/mode-javascript.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-twilight.js" type="text/javascript" charset="utf-8"></script>
		<script>
		window.onload	= function(){
	        var editor = ace.edit("editor");
		    var JavaScriptMode = require("ace/mode/javascript").Mode;
		    editor.getSession().setMode(new JavaScriptMode());
			editor.setTheme("ace/theme/twilight");
			editor.commands.addCommand({
			    name: 'evaluate',
			    bindKey: {
			        win: 'Ctrl-Return',
			        mac: 'Command-Return',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
			        var text = editor.getSession().doc.getTextRange(editor.getSelectionRange());
					if(text === "") {
						text = editor.getSession().getValue();
					}
					//window.alert(editor.getSession.getPosition());
					Gibber.runScript(text);
			    }
			});
			editor.commands.addCommand({
			    name: 'stop',
			    bindKey: {
			        win: 'Ctrl-.',
			        mac: 'Command-.',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
					Gibber.active = !Gibber.active;
					if(Gibber.active) console.log("audio on"); else console.log("audio off");
			    }
			});
			
			// editor.getSession().doc.
			
			editor.setShowPrintMargin(false);
				
			//this.document.getLine
			Gibber.init();
				// s = Tri(160, .6);
				// // l = LFO(2, 12)
				// s.mod("freqOffset", LFO(2, 12));
				// s.mod("ampOffset", LFO(8, .4));
				// //s.fm = -.5;
				// t = StepSequencer(250, [125, 150, 88, 112]);
				// s.mod("frequency", t);
		};
		
		</script>
		<style>
		body { margin: 0}
		#editor {
		        position: absolute;
				margin: 0;
		        width: 100%;
		        height: 100%;
		    }
		</style>
	</head>
	<body>
		<div id="editor">// execute selected code using Ctrl-Return. If no code is selected entire block is run.
		
sine = Sine(240, .5); 				// Create a sine wave at frequency 240, amplitude .5
sine.mod("freqOffset", LFO(4,10));  // modulate the frequencyOffset by 10Hz with an LFO running at 4Hz
	
//  Gibber.stop();		// stop audio
//  Gibber.start();		// restart audio

square = Square(120, .15);
freqs = [120, 240, 120, 360];

step = Step(250, freqs); 				// create a step sequencer. each step is 250 ms.

square.mod("frequency", step);			// use step sequencer to set freq of saw wave
square.mod("ampOffset", LFO(10, .15));  // tremolo

tri = Tri(240, .5).mod( "freqOffset", LFO(4,40) ).mod( "ampOffset", LFO(1, .25) ); // mods can cascade

// Gibber.clear(); 		// delete all audio generators		
</div>
	</body>
</html>
