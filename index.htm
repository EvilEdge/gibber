<!DOCTYPE html>
<html>
	<head>
		<script src="js/audiolib.js"></script>
		<script src="js/samples/drum-samples.js"></script>
		<script src="js/gibber/gibber.js"></script>
		<script src="js/gibber/chord.js"></script>								
		<script src="js/gibber/drums.js"></script>
		<script src="js/gibber/arpeggiator.js"></script>
		<script src="js/gibber/beatCallback.js"></script>						
		
	    <script src="js/ace/ace.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/mode-javascript.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-twilight.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-idle_fingers.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/ace/theme-textmate.js" type="text/javascript" charset="utf-8"></script>				
		<script src="js/ace/theme-solarized_light.js" type="text/javascript" charset="utf-8"></script>						
		<script src="js/ace/theme-chrome.js" type="text/javascript" charset="utf-8"></script>				
		
		<script src="js/jquery-1.5.js" type="text/javascript" charset="utf-8"></script>
		<script>
		window.onload	= function(){
	        editor = ace.edit("editor");
		    var JavaScriptMode = require("ace/mode/javascript").Mode;
		    editor.getSession().setMode(new JavaScriptMode());
			editor.setTheme("ace/theme/idle_fingers");
			$('.ace_gutter').css({
				"background-color":"#000",
				"color":"#ccc",
				"border-width": "0px 1px 0px 0px",
				"border-color": "#ccc",
				"border-style": "solid", 
			});
			$(".ace_sb").css("z-index", 10);
			editor.commands.addCommand({
			    name: 'evaluate',
			    bindKey: {
			        win: 'Ctrl-Return',
			        mac: 'Command-Return',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
			        var text = editor.getSession().doc.getTextRange(editor.getSelectionRange());
					if(text === "") {
						var pos = editor.getCursorPosition();
						text = editor.getSession().doc.getLine(pos.row);
					}
					Gibber.runScript(text);
			    }
			});
			editor.commands.addCommand({
			    name: 'evaluate_1',
			    bindKey: {
			        win: 'Ctrl-Shift-Return',
			        mac: 'Command-Shift-Return',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
			        var text = editor.getSession().doc.getTextRange(editor.getSelectionRange());
					if(text === "") {
						var pos = editor.getCursorPosition();
						text = editor.getSession().doc.getLine(pos.row);
					}

					Gibber.callback.addCallback(text, _1);
			    }
			});
			editor.commands.addCommand({
			    name: 'evaluate_4',
			    bindKey: {
			        win: 'Ctrl-Shift-Alt-Return',
			        mac: 'Command-Shift-Option-Return',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
			        var text = editor.getSession().doc.getTextRange(editor.getSelectionRange());
					if(text === "") {
						var pos = editor.getCursorPosition();
						text = editor.getSession().doc.getLine(pos.row);
					}

					Gibber.callback.addCallback(text, _4);
			    }
			});
			
			
			editor.commands.addCommand({
			    name: 'stop',
			    bindKey: {
			        win: 'Ctrl-.',
			        mac: 'Command-.',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
					Gibber.active = !Gibber.active;
					if(Gibber.active) console.log("audio on"); else console.log("audio off");
			    }
			});
			editor.commands.addCommand({
			    name: 'deleteGenerators',
			    bindKey: {
			        win: 'Ctrl-`',
			        mac: 'Command-`',
			        sender: 'editor'
			    },
			    exec: function(env, args, request) {
					Gibber.clear();
					Gibber.audioInit = false;
			    }
			});
			
			editor.setShowPrintMargin(false);
				
			Gibber.init();
			
			$('.aboutsection').click(function(){
			    $('.aboutcontent').toggle();
			});
			$('.optionssection').click(function(){
			    $('.optionscontent').toggle();
			});
			$('.referencesection').click(function(){				
			    $('.referencecontent').toggle();
			});
			
			
		};
		
		</script>
		<style>
		body { margin: 0}
		.ace_scroller {padding-left: .5em;}
		#editor {
			font-family:Monaco;
			font-size: .8em;
	        position: absolute;
			display:inline;
			margin: 0;
	        width: 80%;
	        height: 100%;
		}
		#info {
			position: absolute;
			overflow: scroll;
			display: inline;
			width:20%;
			height:100%;
			font-size: .75em;
			background-color:#333;
			right: 0;
			color: #ccc;
		}
		h1, h2, h3 {
			font-family: "Helvetica-Neue", "Helvetica", "sans-serif";
		}
		h2 {
			color:#333;
		}
		#info h1 {
			margin-left: .25em;
			font-size: 1.5em;
			font-weight: normal;
		}
		h2 {
			background-color:#eee;
			padding-left: .25em;
			font-size: 1.1em;
			font-weight: normal;
		}
		
		h3 {
			font-size: 1em;
			font-weight: normal;
		}
		a { color: #a66; text-decoration: none; }
		.section {
			margin: .5em;
		}
		.referencesection, .aboutsection, .optionssection, .count {
			-webkit-touch-callout: none;
			-webkit-user-select: none;
			-khtml-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			-o-user-select: none;
			user-select: none;
			cursor: default;
			right: 15px;
			margin-top: .25em;
			position:absolute;
			font-color: #444;
			font-size: .8em;
		}
		.count { right: 0; }
		#n1,#n2,#n3,#n4 { margin-right: 10px; }
		#n1 { color:red; }
		select {
			background-color:#000;
			color:#aaa;
		}

		ul {
			margin:0;
			padding:0;
			list-style:none;
		}
		
		button {
			-webkit-border-radius: 0px;
			background-color: #333;
			border: 1px solid #777;
			color: #ccc;
		}
		
		.referencecontent li { margin-bottom: 1.25em; }
		
		.referencecontent pre { display: inline; }
		
		</style>
	</head>
	<body>
		<div id="editor">Gibber.setBPM(180);     // default = 120. You can also refer to Gibber as _g.

s = Sine(240, .25);      // Sine wave with freq 240, amp .5.

s.chain(                // create an fx chain for oscillator                   
    Dist(),             // Distortion
    Delay( _4 )  		// Delay with delay time set to 1/4 of a beat (1/16th note)
);

a = Arp(s, "Cm7", 2, _16, "updown"); // Arpeggiator: Cminor7 chord, 2nd octave, 16th notes, up then down

d = Drums("x*o*x*o*",_8);
d.chain( Trunc(6) );
d.frequency = 660; 	// 440 is base frequency

s.mod("freq", LFO(8, 4), "+");  // Vibrato - modulating frequency by +/- 4Hz 8 times per second
s.removeMod(1);                 // mod 0 is the arp, I know, confusing...

a.shuffle();        // randomize arpeggio
a.reset();          // reset arpeggio

Master.chain( Reverb() );     // Master FX are applied to summed signal of all generators
Master.removeFX(0);           // remove first effect in chain. don't pass a argument to remove all fx.</div>
		<div id="info">
			<h1>GIBBER <span class="count"><span id="n1">1</span><span id="n2">2</span><span id="n3">3</span><span id="n4">4</span></span></h1>
			<div id="about" class="section">
				<h2>About <span class="aboutsection">show/hide</span></h2>
				<div class="aboutcontent">
				<p>
				Gibber is a JavaScript live coding environment with a relatively easy syntax. Gibber has only been tested in Chrome. The syntax is layered on top of the excellent <a href="https://github.com/jussi-kalliokoski/audiolib.js">audioLib.js library</a> by <a href="https://github.com/jussi-kalliokoski">Jussi Kalliokoski</a>. Gibber is open-source and <a href="https://github.com/charlieroberts/Gibber">available for download</a>.</p>
				<p>Other projects/code that contribute to Gibber:</p>
				<ul>
					<li><a href="http://ace.ajax.org/">Ace Code Editor</a></li>
					<li><a href="http://jquery.com">jQuery</a></li>
					<li><a href="http://www.benfarrell.com/2011/12/13/chords-and-arpeggiators-with-audiolib-js/">Chords and Notes from Ben Farrell</a></li>
				</ul>
				</div>
			</div>
			<div id="options" class="section">
				<h2>Options <span class="optionssection">show/hide</span></h2>
				<div class="optionscontent">
					Theme: <select id="theme" size="1" onchange="editor.setTheme(this.value);" style="margin-bottom:1.5em;">
					<option value="ace/theme/chrome">Chrome</option>
					<option value="ace/theme/idle_fingers" selected="selected">idleFingers</option>
					<option value="ace/theme/solarized_light">Solarized Light</option>
					<option value="ace/theme/textmate">TextMate</option>
					<option value="ace/theme/twilight">Twilight</option>
					</select><br>
					<button onclick="editor.renderer.setShowGutter(!editor.renderer.getShowGutter())">Toggle Line Numbers</button>
				</div>
			</div>
		
			<div id="reference" class="section">
				<h2>Key Commands <span class="referencesection">show/hide</span></h2>

				<div class="referencecontent">
					<ul>
					<li><pre>Ctrl-Return (Cmd-Return OSX)</pre> executes selected code. If no code is selected entire script is run.</li>
					<li><pre>Ctrl/Cmd .</pre> toggles the audio on and off</li>
					<li><pre>Ctrl/Cmd `</pre> clears all generators, use this to start over without refreshing and losing your code</li>
					<li><pre>Ctrl/Cmd +- </pre>change font size up and down</li>
					</ul>
				</div>
			</div>
		</div>
	</body>
</html>

<!--
				<h3>Generators</h3>
				<p>All generators(oscillators) accept two parameters in their constructor: frequency and amplitude. The amplitude default is .25, but you have to enter a frequency. The available generators are Sine, Square, Saw, Tri(Triangle), Pulse and LFO.</p>
				Methods:
				<ul>
					<li>mod(str:parameterName, obj:modSource, str:type) : parameterName is the parameter you'd like to modulate. Common options are "frequency" (or "freq") and "amp". modSource is another object such as an LFO or a StepSequencer whose output will change the parameter in question. Modes determine how the parameter is changed. "+" adds the output of the modulator to the paramter, "*" multiples, "++" adds the absolute value of the modulator and "=" assigns the value of the modulator to the parameter; the default is "+"; Vibrato Example:<pre>s = Sine(400); s.mod("freq", LFO(4, 2), "+");</pre></li>
				</ul>

-->