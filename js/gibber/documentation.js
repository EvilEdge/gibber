{"Seq":{"text":"<h1 id=\"seqsequencer\">Seq </h1>\n\n<p>Seq is used to sequence a variety of commands at specific durations. It can be used to call methods on objects, set properties of objects, or call named and anonymous functions.  </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Synth({maxVoices:5});\ns = Seq(['c4', 'd4', 'eb4', 'g4'], [_4, _16, _8]).slave(a);\nt = Seq(function() { s.note('c1'); }, _1);\nu = Seq({\n      chord:['c4m7', 'd4m7],\n      durations:_2,\n      slaves:a\n});</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p><strong>param</strong> <strong>values</strong> : Array or function. The value(s) to be sequenced.  </p>\n\n<p><strong>param</strong> <strong>duration</strong> : Array or Gibber time value. The length for each value in the sequence. This can either be a single Gibber time value or an array of Gibber time values.  </p>\n\n<p>optional: {<strong>message</strong>} : String. A method to be called or a property for the Seq object to set</p>\n\n<hr />\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p><strong>param</strong> <strong>arguments</strong> : Object. A dictionary of messages, durations and slaves to be sequenced. See example.</p>","methods":{"shuffle":"<h3 id=\"seqshufflemethod\">Seq.shuffle : method</h3>\n\n<p><strong>param</strong> <em>sequenceName</em> : String. Default \"note\". The sequence values to shuffle. Choose \"all\" to shuffle all arrays in a sequence.</p>\n\n<p><strong>description</strong> : shuffle() randomizes the order of an array(s) in the Seq object. The order can be reset using the reset() method.</p>","reset":"<h3 id=\"seqresetmethod\">Seq.reset : method</h3>\n\n<p><strong>param</strong> <em>memory location</em> Int. Optional. If a sequencer has retain a order, you can recall it by passing its number here. Otherwise the sequence is reset to its original order</p>\n\n<p><strong>description</strong> : reset order of sequence to its original order or to a memorized set of positions</p>","advance":"<h3 id=\"seqadvancemethod\">Seq.advance : method</h3>\n\n<p><strong>description</strong> : Run the current event and schedule the next one. This is called automatically by the master clock if a sequencer is added to the Gibber.callback.slaves array.\nThis should never need to be explicitly called.</p>","once":"<h3 id=\"seqoncemethod\">Seq.once : method</h3>\n\n<p><strong>param</strong> <em>sequenceName</em> : String. Default \"note\". The sequence that is played through to the end; all other sequences stop at the end of this one regardless of their length. </p>\n\n<p><strong>description</strong> : Play the sequence once and then end it</p>","random":"<h3 id=\"seqrandommethod\">Seq.random : method</h3>\n\n<p><strong>description</strong> : Shuffle the sequence each time it is played. Currently only works on note sequence</p>","kill":"<h3 id=\"seqkillmethod\">Seq.kill : method</h3>\n\n<p><strong>description</strong> : Destroy the sequencer</p>","slave":"<h3 id=\"seqslavemethod\">Seq.slave : method</h3>\n\n<p><strong>param</strong> <em>slaves</em> Comma separated list of generators. The generators to be controlled by this sequencer  </p>\n\n<p><strong>description</strong> : This method tells the Seq object to send messages / set properties to the objects passed as parameters\nexample:\n<code>s = Synth();\nss = Synth();\nt = Seq([\"C4\", \"D4\"], _1);\nt.slave(s, ss);</code></p>","free":"<h3 id=\"seqfreemethod\">Seq.free : method</h3>\n\n<p><strong>param</strong> <em>slave</em> : Optional generator. Free the passed generator. If no generator is passed, free all slaved generators</p>","stop":"<h3 id=\"seqstopmethod\">Seq.stop : method</h3>\n\n<p><strong>description</strong> : stop the sequencer from running and reset the position counter to 0</p>","pause":"<h3 id=\"seqpausemethod\">Seq.pause : method</h3>\n\n<p><strong>description</strong> : stop the sequencer from running but do not reset the current position</p>","repeat":"<h3 id=\"seqrepeatmethod\">Seq.repeat : method</h3>\n\n<p><strong>param</strong> <em>timesToRepeat</em> : Integer. The number of times the sequence should repeat.</p>\n\n<p><strong>description</strong> : repeat the sequence a certain number of times and then stop it</p>","play":"<h3 id=\"seqplaymethod\">Seq.play : method</h3>\n\n<p><strong>description</strong> : start the sequencer running</p>"},"properties":{"speed":"<h3 id=\"seqspeedproperty\">Seq.speed : property</h3>\n\n<p>Integer. A single time value that determines how long each sequencer event lasts. This property only has an effect if the durations\nproperty of the sequencer object is null, otherwise the durations property takes priority.</p>","offset":"<h3 id=\"seqoffsetproperty\">Seq.offset : property</h3>\n\n<p>Integer. An offset in samples for the scheduling of all events by the sequencer.</p>","durations":"<h3 id=\"seqdurationsproperty\">Seq.durations : property</h3>\n\n<p>Array. The time values the sequencer uses to schedule events.</p>","humanize":"<h3 id=\"seqhumanizeproperty\">Seq.humanize : property</h3>\n\n<p>Integer. Setting this to a non-null value will cause scheduling to be off by a random amount where in between -humanize and +humanize.\nFor example, <code>seq.humanize = 200;</code> would mean that scheduled values could be off by -200..200 samples. </p>"},"type":" Sequencer"},"Synth":{"text":"<h1 id=\"synthsynth\">Synth </h1>\n\n<p>Create an oscillator(s) with an attached attack / decay envelope(s) that can play notes or chords. The primary oscillator is determined by the\nwaveform property and can currently be Sine, Saw, Triangle, Square or Noise. Presets are short and rhodes.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>s = Synth();\ns.note(\"A4\"); <br />\nt = Synth({ \n    waveform:\"Saw\",\n    maxVoices:5, \n    attack:_1,\n    decay:_1\n});\nt.chord(\"c3m7\");</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p>param <strong>attack</strong>: Int in ms. The number of milliseconds the attack of the synth's envelope lasts <br />\nparam <strong>decay</strong> : Int in ms. The number of milliseconds the decay of the synth's envelope lasts <br />\nparam <strong>volume</strong> : Float. The volume of the synth.  </p>\n\n<hr />\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p>param <strong>arguments</strong> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>","methods":{"note":"<h3 id=\"synthnotemethod\">Synth.note : method</h3>\n\n<p>param <strong>note or frequency</strong> : String or Integer. You can pass a note name, such as \"A#4\", or a frequency value, such as 440.\nparam <strong>amp</strong> : Optional. Float. The volume of the note, usually between 0..1. The main amp property of the Synth will also affect note amplitude.</p>\n\n<p>play a note and optionally specify and amplitude for it.</p>","chord":"<h3 id=\"synthchordmethod\">Synth.chord : method</h3>\n\n<p>param <strong>chord name or note list</strong> : String or Array. You can pass a chord name, such as \"C4maj7\", or a list of notes, such as [\"A4\", \"C#4\", \"E4\"]\nparam <strong>amp</strong> : Optional. Float. The volume of the chord, usually between 0..1. The main amp property of the Synth will also affect chord amplitude.</p>\n\n<p>Play a chord and optionally specify and amplitude for it. This method only works if the maxVoices property is set to more than one voice in the constructor. See the example usage for details.</p>"},"properties":{"waveform":"<h3 id=\"synthwaveformproperty\">Synth.waveform : property</h3>\n\n<p>String. The primary oscillator to be used. Can currently be 'Sine', 'Square', 'Noise', 'Triangle' or 'Saw'. </p>","attack":"<h3 id=\"synthattackproperty\">Synth.attack : property</h3>\n\n<p>Integer. The length, in samples, of the attack of the amplitude envelope.</p>","decay":"<h3 id=\"synthdecayproperty\">Synth.decay : property</h3>\n\n<p>Integer. The length, in samples, of the decay of the amplitude envelope.</p>","amp":"<h3 id=\"synthampproperty\">Synth.amp : property</h3>\n\n<p>Float. The peak amplitude of the synth, usually between 0..1</p>","maxVoices":"<h3 id=\"synthmaxvoicesproperty\">Synth.maxVoices : property</h3>\n\n<p>Integer. The number of voices that can be played simultaneously by the synth. NOTE: This property only has effect when assigned in the constructor! See example.</p>","glide":"<h3 id=\"synthglideproperty\">Synth.glide : property</h3>\n\n<p>Integer. The length in time, in samples, to slide in pitch from one note to the next.</p>"},"type":" Synth"},"Synth2":{"text":"<h1 id=\"synth2synth\">Synth2 </h1>\n\n<p>Create an oscillator with an attached envelope and 24db resonant filter that can be triggered by note or chord messages. The envelope controls both the\namplitude and cutoff frequency of the filter. Like the Synth object, the primary oscillator is determined by the\nwaveform property and can currently be Sine, Saw, Triangle, Square or Noise. Presets are short and squeal.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>s = Synth2();\ns.note(\"A4\"); <br />\nt = Synth2({ \n    maxVoices:5,\n    cutoff:0,\n    filterMult:.5,\n    attack:_1,\n    decay:_1\n});\nt.chord(\"c4m7\");</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p>param <strong>arguments</strong> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>","methods":{"note":"<h3 id=\"synth2notemethod\">Synth2.note : method</h3>\n\n<p>param <strong>note or frequency</strong> : String or Integer. You can pass a note name, such as \"A#4\", or a frequency value, such as 440.\nparam <strong>amp</strong> : Optional. Float. The volume of the note, usually between 0..1. The main amp property of the Synth will also affect note amplitude.</p>\n\n<p>play a note and optionally specify and amplitude for it.</p>","chord":"<h3 id=\"synth2chordmethod\">Synth2.chord : method</h3>\n\n<p>param <strong>chord name or note list</strong> : String or Array. You can pass a chord name, such as \"C4maj7\", or a list of notes, such as [\"A4\", \"C#4\", \"E4\"]\nparam <strong>amp</strong> : Optional. Float. The volume of the chord, usually between 0..1. The main amp property of the Synth will also affect chord amplitude.</p>\n\n<p>Play a chord and optionally specify and amplitude for it. This method only works if the maxVoices property is set to more than one voice in the constructor. See the example usage for details.</p>"},"properties":{"waveform":"<h3 id=\"synth2waveformproperty\">Synth2.waveform : property</h3>\n\n<p>String. The primary oscillator to be used. Can currently be 'Sine', 'Square', 'Noise', 'Triangle' or 'Saw'. </p>","attack":"<h3 id=\"synth2attackproperty\">Synth2.attack : property</h3>\n\n<p>Integer. The length, in samples, of the attack of the amplitude envelope.</p>","decay":"<h3 id=\"synth2decayproperty\">Synth2.decay : property</h3>\n\n<p>Integer. The length, in samples, of the decay of the amplitude envelope.</p>","amp":"<h3 id=\"synth2ampproperty\">Synth2.amp : property</h3>\n\n<p>Float. The peak amplitude of the synth, usually between 0..1</p>","maxVoices":"<h3 id=\"synth2maxvoicesproperty\">Synth2.maxVoices : property</h3>\n\n<p>Integer. The number of voices that can be played simultaneously by the synth. NOTE: This property only has effect when assigned in the constructor! See example.</p>","cutoff":"<h3 id=\"synth2cutoffproperty\">Synth2.cutoff : property</h3>\n\n<p>Float. The frequency cutoff for the synth's filter. Range is 0..1.</p>","filterMult":"<h3 id=\"synth2filtermultproperty\">Synth2.filterMult : property</h3>\n\n<p>Float. As the envelope on the synth progress, the filter cutoff will also change by this amount * the envelope amount.</p>","resonance":"<h3 id=\"synth2resonanceproperty\">Synth2.resonance : property</h3>\n\n<p>Float. The emphasis placed on the filters cutoff frequency. 0..50, however, GOING OVER 5 IS DANGEROUS TO YOUR EARS (ok, maybe 6 is all right...)</p>","glide":"<h3 id=\"synth2glideproperty\">Synth2.glide : property</h3>\n\n<p>Integer. The length in time, in samples, to slide in pitch from one note to the next.</p>"},"type":" Synth"},"Mono":{"text":"<h1 id=\"monosynth\">Mono </h1>\n\n<p>A three oscillator monosynth for bass and lead lines. You can set the octave and tuning offsets for oscillators 2 &amp; 3. There is a 24db filter and an envelope controlling\nboth the amplitude and filter cutoff. Presets are: short, lead, bass, easy, dark, dark2.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>s = Mono();\ns.note(\"A4\"); <br />\nt = Mono({ \n    cutoff:0,\n    filterMult:.5,\n    attack:_8,\n    decay:_8,\n    octave2:-1,\n    octave3:-1,\n    detune2:.01,\n    glide:_12,\n});\nt.note(\"C3\");</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p>param <strong>arguments</strong> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p>param <strong>presetName</strong> : String. A preset to choose for starting values. Current values are 'short', 'lead', and 'bass'.\n  param <strong>arguments</strong> : Object. A dictionary of property values to set upon initialization; these override any settings in the preset. See the properties section and the example usage section for details.</p>","methods":{"note":"<h3 id=\"mononotemethod\">Mono.note : method</h3>\n\n<p>param <strong>note or frequency</strong> : String or Integer. You can pass a note name, such as \"A#4\", or a frequency value, such as 440.\nparam <strong>amp</strong> : Optional. Float. The volume of the note, usually between 0..1. The main amp property of the Synth will also affect note amplitude.</p>"},"properties":{"waveform":"<h3 id=\"monowaveformproperty\">Mono.waveform : property</h3>\n\n<p>String. The primary oscillator to be used. Can currently be 'Sine', 'Square', 'Noise', 'Triangle' or 'Saw'. </p>","attack":"<h3 id=\"monoattackproperty\">Mono.attack : property</h3>\n\n<p>Integer. The length, in samples, of the attack of the amplitude envelope.</p>","decay":"<h3 id=\"monodecayproperty\">Mono.decay : property</h3>\n\n<p>Integer. The length, in samples, of the decay of the amplitude envelope.</p>","amp":"<h3 id=\"monoampproperty\">Mono.amp : property</h3>\n\n<p>Float. The peak amplitude of the synth, usually between 0..1</p>","cutoff":"<h3 id=\"monocutoffproperty\">Mono.cutoff : property</h3>\n\n<p>Float. The frequency cutoff for the synth's filter. Range is 0..1.</p>","filterMult":"<h3 id=\"monofiltermultproperty\">Mono.filterMult : property</h3>\n\n<p>Float. As the envelope on the synth progress, the filter cutoff will also change by this amount * the envelope amount.</p>","resonance":"<h3 id=\"monoresonanceproperty\">Mono.resonance : property</h3>\n\n<p>Float. The emphasis placed on the filters cutoff frequency. 0..50, however, GOING OVER 5 IS DANGEROUS TO YOUR EARS (ok, maybe 6 is all right...)</p>","octave2":"<h3 id=\"monooctave2property\">Mono.octave2 : property</h3>\n\n<p>Integer. The octave difference between oscillator 1 and oscillator 2. Can be positive (higher osc2) or negative (lower osc 2) or 0 (same octave).</p>","detune2":"<h3 id=\"monodetune2property\">Mono.detune2 : property</h3>\n\n<p>Float. The amount, from -1..1, the oscillator 2 is detuned. A value of -.5 means osc2 is half an octave lower than osc1. A value of .01 means osc2 is .01 octaves higher than osc1.</p>","octave3":"<h3 id=\"monooctave3property\">Mono.octave3 : property</h3>\n\n<p>Integer. The octave difference between oscillator 1 and oscillator 3. Can be positive (higher osc3) or negative (lower osc 3) or 0 (same octave).</p>","detune3":"<h3 id=\"monodetune3property\">Mono.detune3 : property</h3>\n\n<p>Float. The amount, from -1..1, the oscillator 3 is detuned. A value of -.5 means osc3 is half an octave lower than osc1. A value of .01 means osc3 is .01 octaves higher than osc1.</p>","glide":"<h3 id=\"monoglideproperty\">Mono.glide : property</h3>\n\n<p>Integer. The length in time, in samples, to slide in pitch from one note to the next.</p>"},"type":" Synth"},"Arp":{"text":"<h1 id=\"arpsequencer\">Arp </h1>\n\n<p>The Arpeggiator takes a chord and plays the individual notes comprising it in succession, with different possible patterns.\nIt is basically an extended <a href=\"javascript:Gibber.Environment.displayDocs('Seq')\">Seq</a> object. The available patterns are:  </p>\n\n<ul>\n<li><em>up</em> : Play the notes in ascending order. After the top note, drop back to the bottom  </li>\n<li><em>down</em> : Play the notes in descending order. After the bottom note, jump to the top  </li>\n<li><em>updown</em> : Play the notes all the way up, and then play them all the way down. The top and bottom notes repeat when changing direction  </li>\n<li><em>updown2</em> : Play the notes all the way up, and then play them all the way down. The top and bottom notes DO NOT repeat when changing direction  </li>\n</ul>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Sine();\nb = Arp('c2m7', _32, 'updown2', 4).slave(s);\n</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>notation</em> : String. The chord to be sequenced. <br />\n  <strong>param</strong> <em>duration</em> : Integer. The duration for each note in the arpeggio. <br />\n  <strong>param</strong> <em>pattern</em> : String. Default: \"up\". The ordering for the arpeggio. <br />\n  <strong>param</strong> <em>mult</em> : Integer. How many octaves the arpeggio should span. The default is 1.</p>","methods":{"chord":"<h3 id=\"arpchordmethod\">Arp.chord : method</h3>\n\n<p><strong>param</strong> <em>chord name</em> String. The chord to be sequenced.</p>\n\n<p><strong>description</strong> : Change the chord that the Arpeggiator is arpeggiating.</p>"},"properties":{},"type":" Sequencer"},"Drums":{"text":"<h1 id=\"drumsmiscellaneous\">Drums </h1>\n\n<p>Four different samplers linked to a single <a href=\"javascript:Gibber.Environment.displayDocs('Seq ')\">Seq</a> for convenience. The four samplers feed into a single\n<a href=\"javascript:Gibber.Environment.displayDocs('Bus')\">Bus</a>; this means you can change the amplitude / apply\nfx to each sampler individually or make changes to the Bus. Similarly, you can change the pitch of individual samplers and for the Drums as a whole.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>d = Drums('x*o*x*o-', _8);\nd.amp = .4;\nd.snare.amp = 1.2;\nd.snare.fx.add( Delay(_16) );\nd.fx.add( Flanger() );\nd.shuffle(); // shuffle the underlying sequence</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>sequence</em>: String. Uses x for kick, o for snare, * for closed hihat, - for open hihat\n<strong>param</strong> <em>timeValue</em>: Int. A duration in samples for each drum hit. Commonly uses Gibber time values such as _4, _8 etc. <br />\n<strong>param</strong> <em>amp</em>: Float. Default = .175. Volume for drums <br />\n<strong>param</strong> <em>freq</em>: Int. The audioLib.js samplers use 440 as a fundamental frequency. You can raise or lower the pitch of samples by changing this value.  </p>\n\n<p>example usage: <br />\n<code>d = Drums(\"x*o*x*o-\", _8);</code></p>\n\n<p>note that most Drum methods mirror that of Seq. </p>","methods":{"shuffle":"<h3 id=\"drumsshufflemethod\">Drums.shuffle : method</h3>\n\n<p><strong>description</strong> : shuffle() randomizes the order of notes in the Drums object. The order can be reset using the reset() method.</p>","reset":"<h3 id=\"drumsresetmethod\">Drums.reset : method</h3>\n\n<p><strong>param</strong> <em>memory location</em> Int. Optional. If Drums has retained an order, you can recall it by passing its number here. Otherwise the Drums sequence is reset to its original order</p>\n\n<p><strong>description</strong> : reset order of Drumssequence to its original order or to a memorized set of positions</p>","stop":"<h3 id=\"drumsstopmethod\">Drums.stop : method</h3>\n\n<p><strong>description</strong> : stop the Drums sequencer from running and reset the position counter to 0</p>","play":"<h3 id=\"drumsplaymethod\">Drums.play : method</h3>\n\n<p><strong>description</strong> : start the Drums sequencer running</p>","kill":"<h3 id=\"drumskillmethod\">Drums.kill : method</h3>\n\n<p><strong>description</strong> : Remove a Drums instance from the audio graph</p>","once":"<h3 id=\"drumsoncemethod\">Drums.once : method</h3>\n\n<p><strong>description</strong> : Play the Drums sequence once and then stop.</p>","note":"<h3 id=\"drumsnotemethod\">Drums.note : method</h3>\n\n<p><strong>param</strong> <em>note</em> : String. The note you want the drum to play. Can be x, o, *, -. <br />\n<strong>description</strong> : shuffle() randomizes the order of notes in the Drums object. The order can be reset using the reset() method.</p>"},"properties":{"pitch":"<h3 id=\"drumspitchproperty\">Drums.pitch : property</h3>\n\n<p>Float. The overall pitch of the Drums. Each specific drum can also have its pitch set.</p>","kick":"<h3 id=\"drumskickproperty\">Drums.kick : property</h3>\n\n<p>// <a href=\"javascript:Gibber.Environment.displayDocs('Sampler')) (read-only\">Sampler</a>.\n// </p>","snare":"<h3 id=\"drumssnareproperty\">Drums.snare : property</h3>\n\n<p>// <a href=\"javascript:Gibber.Environment.displayDocs('Sampler')) (read-only\">Sampler</a>.\n// </p>","hat":"<h3 id=\"drumshatproperty\">Drums.hat : property</h3>\n\n<p>// <a href=\"javascript:Gibber.Environment.displayDocs('Sampler')) (read-only\">Sampler</a>.\n// </p>","openHat":"<h3 id=\"drumsopenhatproperty\">Drums.openHat : property</h3>\n\n<p>// <a href=\"javascript:Gibber.Environment.displayDocs('Sampler')) (read-only\">Sampler</a>.\n// </p>","seq":"<h3 id=\"drumsseqproperty\">Drums.seq : property</h3>\n\n<p><a href=\"javascript:Gibber.Environment.displayDocs('Seq')) (read-only\">Seq</a>. The underlying sequencer driving the drums. Most methods of this are wrapped,\nfor example, you can simply call <code>drums.play()</code> instead of having to call <code>drums.seq.play</code>.</p>","amp":"<h3 id=\"drumsampproperty\">Drums.amp : property</h3>\n\n<p>Float. The overall amplitude of the Drums. Each specific drum can also have its amplitude set.</p>"},"type":" Miscellaneous"},"Bus":{"text":"<h1 id=\"busmiscellaneous\">Bus </h1>\n\n<p><strong>description</strong> : Create a bus holding fx that signals can be routed to <br />\n<strong>param</strong> <em>name</em>: String Optional name that can be used to refer to the new bus. <br />\n<strong>param</strong> <em>fx</em>: variable length object list. A comma delimited list of effects to attach to the bus.  </p>\n\n<h2 id=\"exampleusage\">Example Usage##</h2>\n\n<p><code>b = Bus( Delay(_4), Reverb() ); <br />\ns = Synth(); <br />\ns.send( b, .5 );</code>\nalternatively: <br />\n<code>b = Bus( \"rev\", Delay(_4), Reverb() ); <br />\ns = Synth(); <br />\ns.send( \"rev\", .5 );</code></p>","methods":{},"properties":{},"type":" Miscellaneous"},"Flanger":{"text":"<h1 id=\"flangerfx\">Flanger </h1>\n\n<p><strong>description</strong> : A traditional flanger using a variable-length comb filter.</p>\n\n<p><strong>param</strong> <em>rate</em>: Float. Default = .25. Measured in Hz, this is the speed that the delay line size fluctuates at <br />\n<strong>param</strong> <em>amount</em>: Int. Default = 125. The amount that the size of the delay line fluctuates by <br />\n<strong>param</strong> <em>feedback</em>: Float. Default = .25. Feedback for the flanger. Increase to get a more pronounced effect <br />\n<strong>param</strong> <em>offset</em>: Int. Default = amount. The offset of the flanger's comb filter from the current sample. By default this is the same as the amount parameter  </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>p = Pluck(0, 1); <br />\np.fx.add( Flanger() ); <br />\np.note( \"A3\" );</code></p>","methods":{},"properties":{"rate":"<h3 id=\"flangerrateproperty\">Flanger.rate : property</h3>\n\n<p>Float. Hz. the speed that the delay line size fluctuates at.</p>","amount":"<h3 id=\"flangeramountproperty\">Flanger.amount : property</h3>\n\n<p>Int. Samples. The amount that the size of the delay line fluctuates by.</p>"},"type":" FX"},"Vibrato":{"text":"<h1 id=\"vibratofx\">Vibrato </h1>\n\n<p><strong>description</strong> : A small variation on the flanger that only outputs the 'wet' signal and creates fluctuations in pitch. \nThe rate controls the speed of the vibrato, while the maximum size of the vibrato in pitch is determined by offset * amount.</p>\n\n<p><strong>param</strong> <em>rate</em>: Float. Default = 5. Measured in Hz, this is the speed that the delay line size fluctuates at.  </p>\n\n<p><strong>param</strong> <em>amount</em>: Int. Default = .5. The amount that the size of the delay line fluctuates by as a percentage of the offset.  </p>\n\n<p><strong>param</strong> <em>offset</em>: Int. Default = 125. The base delay of the output from the input sample. This fluctuates according to the rate and amount. Is best to set upon initialization and not touch.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>p = Pluck(0, 1); <br />\np.fx.add( Vibrato() ); <br />\np.note( \"A3\" );</code></p>","methods":{},"properties":{"rate":"<h3 id=\"vibratorateproperty\">Vibrato.rate : property</h3>\n\n<p>Float. Hz. the speed that the delay line size fluctuates at.</p>","amount":"<h3 id=\"vibratoamountproperty\">Vibrato.amount : property</h3>\n\n<p>Int. Samples. The amount that the size of the delay line fluctuates by.</p>","offset":"<h3 id=\"vibratooffsetproperty\">Vibrato.offset : property</h3>\n\n<p>Int. Samples. The base delay offset for the output sample. In general this should only be set upon initialization.</p>"},"type":" FX"},"Tremolo":{"text":"<h1 id=\"tremolofx\">Tremolo </h1>\n\n<p><strong>description</strong> : Amplitude modulation</p>\n\n<p><strong>param</strong> <em>rate</em>: Float. Default = 2.5. Measured in Hz, this is the speed of the tremolo</p>\n\n<p><strong>param</strong> <em>amount</em>: Float. Default = .5. The maximum change in amplitude</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>p = Pluck(0, 1); <br />\np.fx.add( Tremolo() ); <br />\np.note( \"A3\" );</code></p>","methods":{},"properties":{"rate":"<h3 id=\"tremolorateproperty\">Tremolo.rate : property</h3>\n\n<p>Float. Hz. the speed that the delay line size fluctuates at.</p>","amount":"<h3 id=\"tremoloamountproperty\">Tremolo.amount : property</h3>\n\n<p>Float. The maximum change in amplitude</p>"},"type":" FX"},"Chorus":{"text":"<h1 id=\"chorusfx\">Chorus</h1>\n\n<p><strong>description</strong> : cheap chorus using a flanger with an extreme offset see http://denniscronin.net/dsp/article.html</p>\n\n<p><strong>param</strong> <em>rate</em>: Float. Default = .25. Measure in Hz, this is the speed that the delay line size fluctuates at <br />\n<strong>param</strong> <em>amount</em>: Int. Default = 125. The amount that the size of the delay line fluctuates by </p>","methods":{},"properties":{"rate":"<h3 id=\"chorusrateproperty\">Chorus.rate : property</h3>\n\n<p>Float. Hz. The speed that the delay line size fluctuates at.</p>","amount":"<h3 id=\"chorusamountproperty\">Chorus.amount : property</h3>\n\n<p>Float. Hz. The amount that the size of the delay line fluctuates by.</p>"},"type":" FX"},"Reverb":{"text":"<h1 id=\"reverbfx\">Reverb</h1>\n\n<p><strong>description</strong> :  based off audiolib.js reverb and freeverb. There are four presets for Reverb: small, medium, large, and space (like outer space).</p>\n\n<p><strong>param</strong> <em>roomSize</em>: Float. Default = .8. The size of the room being emulated <br />\n<strong>param</strong> <em>damping</em>: Float. Default = .3. Attenuation of high frequencies that occurs <br />\n<strong>param</strong> <em>wet</em>: Float. Default = .75. The amount of processed signal that is output <br />\n<strong>param</strong> <em>dry</em>: Float. Default = .5. The amount of dry signal that is output  </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>s = Synth(); <br />\ns.fx.add( Reverb() );</code></p>","methods":{},"properties":{"roomSize":"<h3 id=\"reverbroomsizeproperty\">Reverb.roomSize : property</h3>\n\n<p>Float. Hz. The size of the room being emulated.</p>","damping":"<h3 id=\"reverbdampingproperty\">Reverb.damping : property</h3>\n\n<p>Float. Attenuation of high frequencies that occurs.</p>","wet":"<h3 id=\"reverbwetproperty\">Reverb.wet : property</h3>\n\n<p>Float. Default = .75. The amount of processed signal that is output.  </p>","dry":"<h3 id=\"reverbdryproperty\">Reverb.dry : property</h3>\n\n<p>Float. Default = .5. The amount of dry signal that is output</p>"},"type":" FX"},"Delay":{"text":"<h1 id=\"delayfx\">Delay</h1>\n\n<p><strong>param</strong> <em>time</em>: Int. Default = _4. The number of samples betweeen echoes, usually expressed in Gibber time variables\n<strong>param</strong> <em>feedback</em>: Float. Default = .3. How much of the output is fed back into the input of hte delay  </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>s = Synth(); <br />\ns.fx.add( Delay() );</code></p>","methods":{},"properties":{"time":"<h3 id=\"delaytimeproperty\">Delay.time : property</h3>\n\n<p>Int. The number of samples betweeen echoes, usually expressed in Gibber time variables</p>","feedback":"<h3 id=\"delayfeedbackproperty\">Delay.feedback : property</h3>\n\n<p>Float. The amplitude of the sine wave the signal is multiplied by  </p>"},"type":" FX"},"Ring":{"text":"<h1 id=\"ringfx\">Ring</h1>\n\n<p><strong>param</strong> <em>frequency</em>: Float. Default = 440. The frequency of the sine wave that the signal is multiplied by <br />\n<strong>param</strong> <em>amount</em>: Float. Default = 1. The amplitude of the sine wave the signal is multiplied by  </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>s = Synth(); <br />\ns.fx.add( Ring(220, .5) );</code></p>","methods":{},"properties":{"frequency":"<h3 id=\"ringfrequencyproperty\">Ring.frequency : property</h3>\n\n<p>Float. The frequency of the sine wave that the signal is multiplied by  </p>"},"type":" FX"},"Crush":{"text":"<h1 id=\"crushfx\">Crush</h1>\n\n<p><strong>description</strong> : A bit-crusher / sample-rate reducer\n<strong>param</strong> <em>bitDepth</em>: Float. Default = 8. The number of bits to truncate the output to.\n<strong>param</strong> <em>sampleRate</em>: Float. Default = 1. The sampleRate to downsample to. Range is 0..1\nexample usage: <br />\n<code>d = Drums(\"xoxo\"); <br />\nd.fx.add( Crush(6, .05) );</code></p>","methods":{},"properties":{"bitDepth":"<h3 id=\"crushbitdepthproperty\">Crush.bitDepth : property</h3>\n\n<p>Float. The number of bits to truncate the output to.</p>","sampleRate":"<h3 id=\"crushsamplerateproperty\">Crush.sampleRate : property</h3>\n\n<p>Float. The sampleRate to downsample to. Range is 0..1</p>"},"type":" FX"},"Clip":{"text":"<h1 id=\"clipfx\">Clip</h1>\n\n<p><strong>description</strong> : A simple waveshaping distortion using y = x / (1+|x|). Clip also has a logarithmic volume adapter to the equation so that you can\napply extreme amounts of clipping</p>\n\n<p><strong>param</strong> <em>amount</em>: Float. Default = 4. Minimum of 2. The amount of distortion\n<strong>param</strong> <em>amp</em>: Float. Default = 1. The amount of distortion</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>d = Drums(\"xoxo\"); <br />\nd.fx.add( Clip(1000) );</code></p>","methods":{},"properties":{"amount":"<h3 id=\"clipamountproperty\">Clip.amount : property</h3>\n\n<p>Float. The number of bits to truncate the output to.</p>","amp":"<h3 id=\"clipampproperty\">Clip.amp : property</h3>\n\n<p>Float. The sampleRate to downsample to. Range is 0..1</p>"},"type":" FX"},"LPF":{"text":"<h1 id=\"lpffx\">LPF </h1>\n\n<p><strong>description</strong> : 24db resonant ladder-style filter</p>\n\n<p><strong>param</strong> <em>cutoff</em>: Float. Default = .1. The cutoff frequency of the filter. Range is 0..1\n<strong>param</strong> <em>resonance</em>: Float. Default = 3. Emphasis of the cutoff frequency. Range is 0..50. Higher than 6 is scary.</p>\n\n<h2 id=\"exampleusage\">Example Usage##</h2>\n\n<p><code>d = Drums(\"xoxo\");\nd.amp = 3.5; <br />\nl = LPF(.2, 40); <br />\nd.fx.add( Crush(4,.1),  l, Clip(2, .25), Reverb() ); <br />\ns = Seq( function() { l.cutoff = rndf(0,.25);}, _8); <br />\nMaster.fx.add( Flanger() );</code></p>","methods":{},"properties":{"cutoff":"<h3 id=\"lpfcutoffproperty\">LPF.cutoff : property</h3>\n\n<p>Float. The cutoff frequency of the filter. Range is 0..1</p>","resonance":"<h3 id=\"lpfresonanceproperty\">LPF.resonance : property</h3>\n\n<p>Float. Emphasis of the cutoff frequency. Range is 0..50. Higher than 6 is scary. See example for higher than 6.</p>"},"type":" FX"},"HPF":{"text":"<h1 id=\"hpffx\">HPF </h1>\n\n<p><strong>description</strong> : 24db resonant ladder-style filter</p>\n\n<p><strong>param</strong> <em>cutoff</em>: Float. Default = .1. The cutoff frequency of the filter. Range is 0..1\n<strong>param</strong> <em>resonance</em>: Float. Default = 3. Emphasis of the cutoff frequency. Range is 0..50. Higher than 6 is scary.</p>\n\n<h2 id=\"exampleusage\">Example Usage##</h2>\n\n<p><code>d = Drums(\"xoxo\");\nd.amp = 3.5; <br />\nl = HPF(.2, 40); <br />\nd.fx.add( Crush(4,.1),  l, Clip(2, .25), Reverb() ); <br />\ns = Seq( function() { l.cutoff = rndf(0,.25);}, _8); <br />\nMaster.fx.add( Flanger() );</code></p>","methods":{},"properties":{"cutoff":"<h3 id=\"hpfcutoffproperty\">HPF.cutoff : property</h3>\n\n<p>Float. The cutoff frequency of the filter. Range is 0..1</p>","resonance":"<h3 id=\"hpfresonanceproperty\">HPF.resonance : property</h3>\n\n<p>Float. Emphasis of the cutoff frequency. Range is 0..50. Higher than 6 is scary. See example for higher than 6.</p>"},"type":" FX"},"Gain":{"text":"<h1 id=\"gainfx\">Gain </h1>\n\n<p><strong>description</strong> : a simple gain controller, can be used to scale output for example after high amplitude distortions or resonant filters.  </p>\n\n<p><strong>param</strong> <em>gain</em>: Float. Default = 1. A multiple for the amplitude.</p>","methods":{},"properties":{"gain":"<h3 id=\"gaingainproperty\">Gain.gain : property</h3>\n\n<p>Float. A multiple for the amplitude.</p>"},"type":" FX"},"Schizo":{"text":"<h1 id=\"schizofx\">Schizo </h1>\n\n<p><strong>description</strong> : A buffer shuffling / stuttering effect with reversing and pitch-shifting. Presets include sane, borderline, paranoid and psycho.</p>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p><strong>param</strong> <em>properties</em> : Object. A dictionary of property keys and values to assign to the Schizo object</p>\n\n<hr />\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p><strong>param</strong> <em>presetName</em> : String. The name of a Schizo preset to use. Current choices include \"sane\", \"borderline\", \"paranoid\" and \"psycho\".</p>\n\n<h2 id=\"exampleusage\">Example Usage##</h2>\n\n<p><code>d = Drums(\"x*o*x*o-\");\nd.fx.add(Schizo('paranoid'));</code></p>","methods":{},"properties":{"rate":"<h3 id=\"schizorateproperty\">Schizo.rate : property</h3>\n\n<p>Integer, in samples. Default 11025. How often Schizo will randomly decide whether or not to shuffle.</p>","chance":"<h3 id=\"schizochanceproperty\">Schizo.chance : property</h3>\n\n<p>Float. Range 0..1. Default .25. The likelihood that incoming audio will be shuffled.</p>","wet":"<h3 id=\"schizowetproperty\">Schizo.wet : property</h3>\n\n<p>Float. Range 0..1. Default 1. When shuffling, the amplitude of the wet signal</p>","dry":"<h3 id=\"schizodryproperty\">Schizo.dry : property</h3>\n\n<p>Float. Range 0..1. Default 0. When shuffling, the amplitude of the dry signal</p>","length":"<h3 id=\"schizolengthproperty\">Schizo.length : property</h3>\n\n<p>Integer, in samples. Default 22050. The length of time to play stuttered audio when stuttering occurs.</p>","reverseChance":"<h3 id=\"schizoreversechanceproperty\">Schizo.reverseChance : property</h3>\n\n<p>Float. Range 0..1. Default .5. The likelihood that stuttered audio will be reversed</p>","pitchChance":"<h3 id=\"schizopitchchanceproperty\">Schizo.pitchChance : property</h3>\n\n<p>Float. Range 0..1. Default .5. The likelihood that stuttered audio will be repitched.</p>","pitchMin":"<h3 id=\"schizopitchminproperty\">Schizo.pitchMin : property</h3>\n\n<p>Float. Range 0..1. Default .25. The lowest playback speed used to repitch the audio</p>","pitchMax":"<h3 id=\"schizopitchmaxproperty\">Schizo.pitchMax : property</h3>\n\n<p>Float. Range 0..1. Default 2. The highest playback speed used to repitch the audio.</p>"},"type":" FX"},"Grains":{"text":"<h1 id=\"grainsbufferrecordingplayback\">Grains </h1>\n\n<p>A granulator that operates on a buffer of samples. You can either get the samples from a <a href=\"javascript:Gibber.Environment.displayDocs('Sampler')\">Sampler</a>\nobject, or directly record the output of a <a href=\"javascript:Gibber.Environment.displayDocs('Bus')) (like the Master bus\">Bus</a>.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>d = Drums('x*o*x*o-'); <br />\ng = Grains({input:d, amp:.8, bufferLength:2});\ng.loop(.2, .8, 16);\ng.mod(\"speedMax\", Line(.1, .8, true), \"=\");\ng.mod(\"speedMin\", Line(-.1, -.8, 16, true), \"=\"); <br />\nd.stop();</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>propertiesList</em>: Object. At a minimum you should define the input to granulate. See the example.</p>","methods":{"loop":"<h3 id=\"grainsloopmethod\">Grains.loop : method</h3>\n\n<p><strong>param</strong> <em>min</em> Float. Default .25. The starting position for the playback loop. Measured from 0..1 where is the buffer start, 1 is the buffer end.  </p>\n\n<p><strong>param</strong> <em>max</em> Float. Default .75.The finishing position for the playback loop. Measured from 0..1 where is the buffer start, 1 is the buffer end.     </p>\n\n<p><strong>param</strong> <em>time</em> Int. Default 1. The length of time, in samples, to travel through the loop points once.  </p>\n\n<p><strong>param</strong> <em>shouldLoop</em> Boolean. Default true. If set to false, the buffer will only play through the min and max values once.  </p>\n\n<p><strong>description</strong> : Tell the Grain cloud to travel between two positions in its buffer.</p>"},"properties":{"input":"<h3 id=\"grainsinputproperty\">Grains.input : property</h3>\n\n<p>Object. The input Bus to granulate.</p>","bufferLength":"<h3 id=\"grainsbufferlengthproperty\">Grains.bufferLength : property</h3>\n\n<p>Float. The length, in measures or samples, of the buffer to record and granulate</p>","numberOfGrains":"<h3 id=\"grainsnumberofgrainsproperty\">Grains.numberOfGrains : property</h3>\n\n<p>Float. The number of grains in the cloud. Can currently only be set on initialization.</p>","grainSize":"<h3 id=\"grainsgrainsizeproperty\">Grains.grainSize : property</h3>\n\n<p>Integer. The length, in samples, of each grain</p>","speed":"<h3 id=\"grainsspeedproperty\">Grains.speed : property</h3>\n\n<p>Float. The playback rate, in samples, of each grain</p>","speedMin":"<h3 id=\"grainsspeedminproperty\">Grains.speedMin : property</h3>\n\n<p>Float. When set, the playback rate will vary on a per grain basis from (grain.speed + grain.speedMin) -> (grain.speed + grain.speedMax). This value should almost always be negative.</p>","speedMax":"<h3 id=\"grainsspeedmaxproperty\">Grains.speedMax : property</h3>\n\n<p>Float. When set, the playback rate will vary on a per grain basis from (grain.speed + grain.speedMin) -> (grain.speed + grain.speedMax).</p>","position":"<h3 id=\"grainspositionproperty\">Grains.position : property</h3>\n\n<p>Float. The center position of the grain cloud. 0 represents the start of the buffer, 1 represents the end.</p>","positionMin":"<h3 id=\"grainspositionminproperty\">Grains.positionMin : property</h3>\n\n<p>Float. The left boundary on the time axis of the grain cloud.</p>","positionMax":"<h3 id=\"grainspositionmaxproperty\">Grains.positionMax : property</h3>\n\n<p>Float. The right boundary on the time axis of the grain cloud.</p>"},"type":" Buffer Recording &amp; Playback"},"Sampler":{"text":"<h1 id=\"samplerbufferrecordingplayback\">Sampler </h1>\n\n<p>Sampler allows you to playback audiofiles at different speeds. It also allows you to record the output of any \nGibber <a href=\"javascript:Gibber.Environment.displayDocs('Bus')\">Bus</a>. \nThis could be the Master bus, or any of the polyphonic instruments that output to their own dedicated bus: <br />\n* <a href=\"javascript:Gibber.Environment.displayDocs('Synth')\">Synth</a> <br />\n* <a href=\"javascript:Gibber.Environment.displayDocs('Synth2')\">Synth2</a> <br />\n* <a href=\"javascript:Gibber.Environment.displayDocs('FMSynth')\">FMSynth</a> <br />\n* <a href=\"javascript:Gibber.Environment.displayDocs('Pluck')\">Pluck</a> <br />\n* <a href=\"javascript:Gibber.Environment.displayDocs('Drums')\">Drums</a> <br />\n* <a href=\"javascript:Gibber.Environment.displayDocs('Input')\">Input</a> </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Drums(\"x*ox*xo-\"); <br />\nb = Sampler();\nb.amp = 2.5;\nb.record(a, 2);\nb.fx.add( HPF(.4, 4.5) ); <br />\nc = Seq({\n  note:[4,2,.5],\n  durations:[_1, _1, _1 * 4],\n  slaves:b\n});\n</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>input</em>: Optional. String. The path to an audiofile to load. You can only load samples from web servers.</p>","methods":{"record":"<h3 id=\"samplerrecordmethod\">Sampler.record : method</h3>\n\n<p><strong>param</strong> <em>input</em>: A <a href=\"javascript:Gibber.Environment.displayDocs('Bus')\">Bus</a> . See the main description for info on what can be recorded.  </p>\n\n<p><strong>param</strong> <em>length</em>: Integer. The length of the recording, in samplers.</p>\n\n<p><strong>description</strong>: Start recording samples from a Gibber Bus. The Master Bus can also be recorded.</p>","note":"<h3 id=\"samplernotemethod\">Sampler.note : method</h3>\n\n<p><strong>param</strong> <em>playbackSpeed</em>: Float. The speed of the buffer playback. Can be positive or negative (for reverse playback).\n<strong>param</strong> <em>amp</em>: Float. The amplitude of the buffer playback.</p>\n\n<p><strong>description</strong>: Play the buffer stored in the sampler object at a given speed and amplitude.</p>"},"properties":{},"type":" Buffer Recording &amp; Playback"},"Looper":{"text":"<h1 id=\"looperbufferrecordingplayback\">Looper </h1>\n\n<p>The Looper ugen allows you to quickly overdub multiple takes from a single sound input. It is primarily designed to work with\nthe <a href=\"javascript:Gibber.Environment.displayDocs('Input')\">Input</a> ugen to record and loop live input, however, it can record\nthe output of any <a href=\"javascript:Gibber.Environment.displayDocs('Bus')\">Bus</a> ugen.</p>\n\n<p>You specify the input source, the number of loops and how long each loop should last in the constructor. The Looper creates a\n<a href=\"javascript:Gibber.Environment.displayDocs('Sampler')\">Sampler</a> object to hold each individual loop behind the scenes;\neach of these Sampler object is stored in the <em>children</em> property of the Looper object. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Input();           // live input only works in Chrome Canary\nb = Looper(a, 4, 1);   // four loops, one measure apiece\nb.loop();\n// wait 2 measures <br />\nc = Seq({\n  speed:[4, .5, -2],   // sequence playback speed\n  durations:2\n  slaves:b\n});\n</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>input</em>: Object or String. A input Bus to record samples from.</p>\n\n<p><strong>param</strong> <em>numberOfLoops</em>: Integer. The number of loops the Looper should overdub on top of each other.</p>\n\n<p><strong>param</strong> <em>loopLength</em>: Integer. The length (in measures or samples) of each loop.</p>","methods":{"loop":"<h3 id=\"looperloopmethod\">Looper.loop : method</h3>\n\n<p><strong>description</strong>: Start recording and looping samples from a Gibber Bus.</p>"},"properties":{"speed":"<h3 id=\"looperspeedproperty\">Looper.speed : property</h3>\n\n<p>Float. The speed of the loop playback. Negative speeds will play the loops in reverse. Default is 1.</p>"},"type":" Buffer Recording &amp; Playback"},"ScaleSeq":{"text":"<h1 id=\"scaleseqsequencer\">ScaleSeq </h1>\n\n<p>ScaleSeq inherits from the <a href=\"javascript:Gibber.Environment.displayDocs('Seq')\">Seq</a> object. By default it is used to send note messages\nwhere each note belongs to a specific scale. The scale is defined by giving a root note and a mode. All of the normal modes (aeolian,\nphrygian, lydian etc.) are supported, in addition to chromatic.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Synth();\ns = ScaleSeq([0,1,2,3], [_4, _16, _8]).slave(a); <br />\nb = Synth();\nt = ScaleSeq({\n    note:[0,2,4,5,7],\n    durations:[_1, _2, _4],\n    root:\"C4\",\n    mode:\"lydian\",\n    slaves:a\n})</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p><strong>param</strong> <strong>values</strong> : Array. The note positions in the scale you want to sequence. Negative numbers will create notes lower than the root.  </p>\n\n<p><strong>param</strong> <strong>duration</strong> : Array or Gibber time value. The length for each value in the sequence. This can either be a single Gibber time value or an array of Gibber time values.  </p>\n\n<hr />\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p><strong>param</strong> <strong>arguments</strong> : Object. A dictionary of messages, durations and slaves to be sequenced. See example.</p>","methods":{},"properties":{"root":"<h3 id=\"scaleseqrootproperty\">ScaleSeq.root : property</h3>\n\n<p>String. The root note for the scale. Possibilities are written in the form of \"C#3\" or \"Bb2\" for c-sharp in the third octave and b-flat in\nthe second ocatve.</p>","mode":"<h3 id=\"scaleseqmodeproperty\">ScaleSeq.mode : property</h3>\n\n<p>String. The mode of the scale. Uses standard modes (such as locrian, mixolydian etc.) and also adds chromatic.</p>"},"type":" Sequencer"},"FM":{"text":"<h1 id=\"fmsynth\">FM </h1>\n\n<p>A simple two operator FM synth with a single attached attack / decay envelope that controls both the amplitude and the modulation index of the synth.\nFM can play notes or chords.  </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>// a brass sound\nf = FM({\n    cmRatio : 1 / 1.0007,\n    index   : 5,\n    attack  : 4100,\n    decay   : 4100,\n});\ns.note(\"A4\"); <br />\ng = FM(\"glockenspiel\", {maxVoices:5});\ng.chord(\"c4m7\");</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1notrecommended\">syntax 1 (not recommended):</h3>\n\n<p><strong>param</strong> <em>cmRatio</em>: Float. The ratio between the carrier and modulation frequency. See the FM synthesis tutorial for details.\n<strong>param</strong> <em>index</em> : Float. The depth of frequency change the modualtor applies to the carrier frequency.\n<strong>param</strong> <em>attack</em>: Int in ms. The number of milliseconds the attack of the synth's envelope lasts <br />\n<strong>param</strong> <em>decay</em> : Int in ms. The number of milliseconds the decay of the synth's envelope lasts  </p>\n\n<hr />\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p><strong>param</strong> <em>arguments</em> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>\n\n<hr />\n\n<h3 id=\"syntax3\">syntax 3:</h3>\n\n<p><strong>param</strong> <em>presetName</em> : String. The name of an FM preset. Current presets include:glockenspiel, frog, radio, noise, brass, clarinet, drum, gong and drum2.\n<strong>param</strong> <em>arguments</em> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>","methods":{"note":"<h3 id=\"fmnotemethod\">FM.note : method</h3>\n\n<p>param <strong>note or frequency</strong> : String or Integer. You can pass a note name, such as \"A#4\", or a frequency value, such as 440.\nparam <strong>amp</strong> : Optional. Float. The volume of the note, usually between 0..1. The main amp property of the Synth will also affect note amplitude.</p>\n\n<p>play a note and optionally specify and amplitude for it.</p>","chord":"<h3 id=\"fmchordmethod\">FM.chord : method</h3>\n\n<p>param <strong>chord name or note list</strong> : String or Array. You can pass a chord name, such as \"C4maj7\", or a list of notes, such as [\"A4\", \"C#4\", \"E4\"]\nparam <strong>amp</strong> : Optional. Float. The volume of the chord, usually between 0..1. The main amp property of the Synth will also affect chord amplitude.</p>\n\n<p>Play a chord and optionally specify and amplitude for it. This method only works if the maxVoices property is set to more than one voice in the constructor. See the example usage for details.</p>"},"properties":{"cmRatio":"<h3 id=\"fmcmratioproperty\">FM.cmRatio : property</h3>\n\n<p>Float. The ratio between the carrier and modulation frequencies. If you play a 440 Hz note with an FM synth, and the cmRatio = 2, the modulator\nfrequency will be 220.</p>","index":"<h3 id=\"fmindexproperty\">FM.index : property</h3>\n\n<p>Float. The strength of the modulation. This value is multipled by the frequency of the carrier in order to determine the amplitude of\nthe modulation sine wave.</p>","attack":"<h3 id=\"fmattackproperty\">FM.attack : property</h3>\n\n<p>Integer. The length, in samples, of the attack of the amplitude / index envelope.</p>","decay":"<h3 id=\"fmdecayproperty\">FM.decay : property</h3>\n\n<p>Integer. The length, in samples, of the decay of the amplitude / index envelope.</p>","amp":"<h3 id=\"fmampproperty\">FM.amp : property</h3>\n\n<p>Float. The peak amplitude of the synth, usually between 0..1</p>","maxVoices":"<h3 id=\"fmmaxvoicesproperty\">FM.maxVoices : property</h3>\n\n<p>Integer. The number of voices that can be played simultaneously by the synth. NOTE: This property only has effect when assigned in the constructor! See example.</p>","glide":"<h3 id=\"fmglideproperty\">FM.glide : property</h3>\n\n<p>Integer. The length in time, in samples, to slide in pitch from one note to the next.</p>"},"type":" Synth"},"Pluck":{"text":"<h1 id=\"pluckphysicalmodel\">Pluck </h1>\n\n<p>An implementation of the Karplus-Strong algorithm that can play notes or chords.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>p = Pluck(); <br />\np.note( \"A3\" ); <br />\np = Pluck({damping:.5, blend:1, maxVoices:5});\np.chord('c4m7'); <br />\ns = ScaleSeq(rndi(-5,7,128), _32).slave(p);\ns.mode = \"phrygian\";\ns.root = \"G3\";\ns.humanize = 200;\n</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p><strong>param</strong> <em>damping</em>: Float. Default = 0. The speed at which the string decays. Note that higher frequencies decay faster than lower frequencies in the (basic) Karplus-Strong implementation  </p>\n\n<p><strong>param</strong> <em>blend</em>: Float. Default = 1. 1 gives string sounds, .5 gives noisy sounds, 0 gives weird sounds  </p>\n\n<p><strong>param</strong> <em>amp</em>: Float. Default = .5. The amplitude of the string(s).</p>\n\n<hr />\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p><strong>param</strong> <em>arguments</em> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>","methods":{},"properties":{},"type":" Physical Model"},"Pluck2":{"text":"<h1 id=\"pluck2physicalmodel\">Pluck2 </h1>\n\n<p>An bi-directional waveguide implementation of the Karplus-Strong algorithm that can play notes or chords.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>p = Pluck2(); <br />\np.note( \"A3\" ); <br />\np = Pluck2({damping:.5, blend:1, maxVoices:5});\np.chord('c4m7'); <br />\ns = ScaleSeq(rndi(-5,7,128), _32).slave(p);\ns.mode = \"phrygian\";\ns.root = \"G3\";\ns.humanize = 200;\n</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p><strong>param</strong> <em>damping</em>: Float. Default = 0. The speed at which the string decays. Note that higher frequencies decay faster than lower frequencies in the (basic) Karplus-Strong implementation  </p>\n\n<p><strong>param</strong> <em>blend</em>: Float. Default = 1. 1 gives string sounds, .5 gives noisy sounds, 0 gives weird sounds  </p>\n\n<p><strong>param</strong> <em>amp</em>: Float. Default = .5. The amplitude of the string(s).</p>\n\n<hr />\n\n<h3 id=\"syntax2\">syntax 2:</h3>\n\n<p><strong>param</strong> <em>arguments</em> : Object. A dictionary of property values to set upon initialization. See the properties section and the example usage section for details.</p>","methods":{},"properties":{},"type":" Physical Model"},"ADSR":{"text":"<h1 id=\"adsrmodulation\">ADSR </h1>\n\n<p>The cannonical four stage envelope.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p>`a = Sine();\ne = ADSR(); <br />\na.mod(\"amp\", e, \"=\"); <br />\ne.trigger();</p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p><strong>param</strong> <em>attack</em>: Integer in samples. The length of time in samples that it takes the envelope to reach its peak amplitude.\n<strong>param</strong> <em>decay</em> : Integer in samples. The length of time in samples that it takes the envelope to decay from its peak to its sustain level.\n<strong>param</strong> <em>sustain</em>: Integer in samples. The length of time the envelope maintains its sustain level\n<strong>param</strong> <em>release</em> : Integer in samples. The length of time the envelope takes to fade from its sustain level to 0.\n<strong>param</strong> <em>attackLevel</em> : Float. The peak level of the envelope, reached at the end of the attack stage.\n<strong>param</strong> <em>sustainLevel</em> : Float. The sustain level of the envelope, reached at the end of the decay stage.</p>","methods":{"run":"<h3 id=\"adsrrunmethod\">ADSR.run : method</h3>\n\n<p>Put the envelope at the start of its attack stage and run it.</p>"},"properties":{},"type":" Modulation"},"Step":{"text":"<h1 id=\"stepmodulation\">Step</h1>\n\n<p>A basic step sequencer</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Sine();\nf = Step([140,280,100,200], _4); <br />\na.mod(\"frequency\", f); <br />\n</code></p>\n\n<h2 id=\"constructors\">Constructors</h2>\n\n<h3 id=\"syntax1\">syntax 1:</h3>\n\n<p><strong>param</strong> <em>values</em>: Array. An array of values to step through.\n<strong>param</strong> <em>speed</em> : Integer in samples. The length of time for each step.</p>","methods":{},"properties":{},"type":" Modulation"},"Line":{"text":"<h1 id=\"linemodulation\">Line</h1>\n\n<p>A simple one-directional ramp</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Sine();\nl = Line(0, .5, _1, true);\na.mod(\"amp\", l, \"=\"); <br />\n</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>startingValue</em>: Float. The starting value for the Line. <br />\n<strong>param</strong> <em>endingValue</em> : Float. The ending value for the Line. <br />\n<strong>param</strong> <em>time</em> : Integer (samples). The time it takes to travel from the start value to the end value. <br />\n<strong>param</strong> <em>shouldLoop</em> : Boolean. Whether or not the line should repeatedly travel from start to finish.</p>","methods":{},"properties":{},"type":" Modulation"},"Env":{"text":"<h1 id=\"envmodulation\">Env</h1>\n\n<p>A two-stage attack / decay envelope</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Sine();\nl = Line(0, .5, _1, true);\na.mod(\"amp\", l, \"=\"); <br />\n</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>attack</em>: Integer in samples. The length of time in samples that it takes the envelope to reach its peak amplitude.\n<strong>param</strong> <em>decay</em> : Integer in samples. The length of time in samples that it takes the envelope to decay from its peak to 0.</p>","methods":{"run":"<h3 id=\"envrunmethod\">Env.run : method</h3>\n\n<p>Put the envelope at the start of its attack stage and run it.</p>"},"properties":{},"type":" Modulation"},"Input":{"text":"<h1 id=\"inputbufferrecordingplayback\">Input </h1>\n\n<p>The Input ugen allows you to grab samples from the audio inputs on your computer. It (currently) requires Chrome Canary; see\nthe audio input, sampling and looping tutorial for details. The Input ugen is immediately connected to Gibber's output... watch\nout for feedback if you're not using headphones. After making an Input ugen you can add fx and monitor them live; you can also\nrecord the Input and play it back using either the <a href=\"javascript:Gibber.Environment.displayDocs('Sampler')\">Sampler</a>, \n<a href=\"javascript:Gibber.Environment.displayDocs('Grains')) or [Looper](javascript:Gibber.Environment.displayDocs('Looper')\">Grains</a> \nugens.</p>\n\n<p>When the first Input object is created for a Gibber session you'll be prompted to grant permission to the browser to use audio\ninput and select the input you would like to use.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>a = Input();    // live input only works in Chrome Canary\na.fx.add( Schizo('paranoid'), Delay(), Reverb() );\n</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p>The constructor takes no parameters, although you'll have to select the input manually the first time you create an Input ugen.</p>","methods":{"disconnect":"<h3 id=\"inputdisconnectmethod\">Input.disconnect : method</h3>\n\n<p><strong>description</strong>: Disconnect the Input from the Master output or any other busses it might be connected to.</p>"},"properties":{},"type":" Buffer Recording &amp; Playback"},"Dots":{"text":"<h1 id=\"dotsshader\">Dots </h1>\n\n<p>A post-processing shader recreating the halftone technique (http://en.wikipedia.org/wiki/Halftone) </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\nbackground(.25);\na = Cube({ fill: [1,0,0], scale:2 });\nb = Dots({ scale:.25 });\nGraphics.fx.add(b);\na.spin(.01);;</code></p>","methods":{},"properties":{"scale":"<h3 id=\"dotsscaleproperty\">Dots.scale : property</h3>\n\n<p>Float. The size of the dots. Larger values result in smaller dots.</p>","center":"<h3 id=\"dotscenterproperty\">Dots.center : property</h3>\n\n<p>THREE.Vector2. Center position of dots</p>","angle":"<h3 id=\"dotsangleproperty\">Dots.angle : property</h3>\n\n<p>Float. Angle of dots in radians</p>","mix":"<h3 id=\"dotsmixproperty\">Dots.mix : property</h3>\n\n<p>Float. Blend of effect with original pixels.</p>"},"type":" Shader"},"Film":{"text":"<h1 id=\"filmshader\">Film </h1>\n\n<p>A shader recreating film grain / scanline effects.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({ fill: [1,0,0] });\nb = Film({ sCount:512, nIntensity:1 });\nGraphics.fx.add(b);\na.spin(.01);</code></p>","methods":{},"properties":{"sCount":"<h3 id=\"filmscountproperty\">Film.sCount : property</h3>\n\n<p>Integer. The number of scanlines to emulate</p>","sIntensity":"<h3 id=\"filmsintensityproperty\">Film.sIntensity : property</h3>\n\n<p>Float. The strength of the scanline effect</p>","nIntensity":"<h3 id=\"filmnintensityproperty\">Film.nIntensity : property</h3>\n\n<p>Float. The strength of the noise effect</p>","grayscale":"<h3 id=\"filmgrayscaleproperty\">Film.grayscale : property</h3>\n\n<p>Boolean. Default false. Whether or not the image should be converted to grayscale.</p>","mix":"<h3 id=\"filmmixproperty\">Film.mix : property</h3>\n\n<p>Float. Blend of effect with original pixels.</p>"},"type":" Shader"},"Bloom":{"text":"<h1 id=\"bloomshader\">Bloom </h1>\n\n<p>A shader producing fringes of light around bright objects and blurring details. Involves convolution and is expensive</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({ fill: [0,0,0], stroke:[1,1,1] });\nb = Bloom({ opacity:2 });\nGraphics.fx.add(b);\na.spin(.01);</code></p>","methods":{},"properties":{"opacity":"<h3 id=\"bloomopacityproperty\">Bloom.opacity : property</h3>\n\n<p>Float. The strength of the Bloom effect</p>","kernelSize":"<h3 id=\"bloomkernelsizeproperty\">Bloom.kernelSize : property</h3>\n\n<p>Float. The size of the convolution kernel used. Can only be set upon initialization</p>"},"type":" Shader"},"Tilt":{"text":"<h1 id=\"tiltshader\">Tilt </h1>\n\n<p>A shader that uses a two-pass blur to produce 'tilted' copies of the original image.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({ fill: [1,0,0], stroke:[1,1,1] });\nb = Tilt({ h:2, v:2, r:1 });\nGraphics.fx.add(b);\na.spin(.01);</code></p>","methods":{},"properties":{"h":"<h3 id=\"tilthproperty\">Tilt.h : property</h3>\n\n<p>Float. The strength of the tilt effect on the horizontal axis</p>","v":"<h3 id=\"tiltvproperty\">Tilt.v : property</h3>\n\n<p>Float. The strength of the tilt effect on the vertical axis</p>","r":"<h3 id=\"tiltrproperty\">Tilt.r : property</h3>\n\n<p>Float. The radius of the blur.</p>","mix":"<h3 id=\"tiltmixproperty\">Tilt.mix : property</h3>\n\n<p>Float. Blend of effect with original pixels.</p>"},"type":" Shader"},"Tint":{"text":"<h1 id=\"tintshader\">Tint </h1>\n\n<p>Apply a tint to the light parts of the scene.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({ fill: [1,0,0], stroke:[1,1,1] });\nb = Tint( { color: Color(\"red\") });\nGraphics.fx.add(b);\na.spin(.01);</code></p>","methods":{},"properties":{"color":"<h3 id=\"tintcolorproperty\">Tint.color : property</h3>\n\n<p>Color. The color to tint the scene.</p>","mix":"<h3 id=\"tintmixproperty\">Tint.mix : property</h3>\n\n<p>Float. Blend of effect with original pixels.</p>"},"type":" Shader"},"Godrays":{"text":"<h1 id=\"godraysshader\">Godrays </h1>\n\n<p>An effect simulating light emnating from an object. Works best with dark backgrounds... objects with dark fills and light strokes are particularly nice. Can also\nbe used to create pretty interesting geometric effects with high density and decay settings.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({ fill: [0,0,0], stroke:[1,1,1] });\nb = Godrays( { density:.35 } );\nGraphics.fx.add(b);\na.spin(.01);</code></p>","methods":{},"properties":{"x":"<h3 id=\"godraysxproperty\">Godrays.x : property</h3>\n\n<p>Float. The x-axis center position the Godrays are emitted from.</p>","y":"<h3 id=\"godraysyproperty\">Godrays.y : property</h3>\n\n<p>Float. The y-axis center position the Godrays are emitted from.</p>","exposure":"<h3 id=\"godraysexposureproperty\">Godrays.exposure : property</h3>\n\n<p>Float. The amount of bleed from light areas</p>","decay":"<h3 id=\"godraysdecayproperty\">Godrays.decay : property</h3>\n\n<p>Float. How quickly the godrays fade from their point of origin</p>","weight":"<h3 id=\"godraysweightproperty\">Godrays.weight : property</h3>\n\n<p>Float.</p>","max":"<h3 id=\"godraysmaxproperty\">Godrays.max : property</h3>\n\n<p>Float. Default 1. A clamp value for the brightness of the godrays.</p>","mix":"<h3 id=\"godraysmixproperty\">Godrays.mix : property</h3>\n\n<p>Float. Default 1. Blend of effect with original pixels.</p>"},"type":" Shader"},"Blur":{"text":"<h1 id=\"blurshader\">Blur </h1>\n\n<p>Applies separate horizontal and vertical blurs.</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({ fill: [1,0,0], stroke:[1,1,1] });\nb = Blur({ h: .01, v:.01 });\nGraphics.fx.add(b);\na.spin(.01);</code></p>","methods":{},"properties":{"h":"<h3 id=\"blurhproperty\">Blur.h : property</h3>\n\n<p>Float. The amount of horizontal blur.</p>","v":"<h3 id=\"blurvproperty\">Blur.v : property</h3>\n\n<p>Float. The amount of vertical blur.</p>","mix":"<h3 id=\"blurmixproperty\">Blur.mix : property</h3>\n\n<p>Float. Blend of effect with original pixels.</p>"},"type":" Shader"},"Pixellate":{"text":"<h1 id=\"pixellateshader\">Pixellate </h1>\n\n<p>Resample image at a reduced frequency</p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({ fill: [1,0,0], stroke:[1,1,1] });\nb = Pixellate({ amount: .01 });\nGraphics.fx.add(b);\na.spin(.01);</code></p>","methods":{},"properties":{"amount":"<h3 id=\"pixellateamountproperty\">Pixellate.amount : property</h3>\n\n<p>Float. Default .01. The number of pixels to output per pass. Higher values give greater degradation.</p>","mix":"<h3 id=\"pixellatemixproperty\">Pixellate.mix : property</h3>\n\n<p>Float. Blend of effect with original pixels.</p>"},"type":" Shader"},"Geometry":{"text":"<h1 id=\"geometrygeometry\">Geometry </h1>\n\n<p>This outlines a collection of shared methods and properties for all primitive geometries and 3D models (<a href=\"javascript:Gibber.Environment.displayDocs('Cube')\">Cube</a>,\n<a href=\"javascript:Gibber.Environment.displayDocs('Sphere'), [Icosahedron](javascript:Gibber.Environment.displayDocs('Icosahedron')), [Tetrahedron](javascript:Gibber.Environment.displayDocs('Tetrahedron')\">Sphere</a>, <a href=\"javascript:Gibber.Environment.displayDocs('Octahedron')\">Octahedron</a>,\n<a href=\"javascript:Gibber.Environment.displayDocs('Icosahedron')), [Cylinder](javascript:Gibber.Environment.displayDocs('Cylinder')\">Icosahedron</a>, <a href=\"javascript:Gibber.Environment.displayDocs('Torus')),  [Knot](javascript:Gibber.Environment.displayDocs('Knot')\">Torus</a>, <a href=\"javascript:Gibber.Environment.displayDocs('Model'))\">Model</a>. They all have similar methods for changing colors, positions, rotation, scale etc.</p>","methods":{"remove":"<h3 id=\"geometryremovemethod\">Geometry.remove : method</h3>\n\n<p>Removes the geometry from the scene. </p>\n\n<h3 id=\"exampleusage\">Example Usage</h3>\n\n<p><code>graphics();\na = Cube({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    height: 50,\n});\na.spin(.01); <br />\na.remove();</code></p>","mod":"<h3 id=\"geometrymodmethod\">Geometry.mod : method</h3>\n\n<p>Modulate a parameter of the geometry each frame</p>\n\n<p><strong>param</strong> <em>propertyName</em>: String. The property to be modulated.  </p>\n\n<p><strong>param</strong> <em>source</em>: Number or Object. The modulation source. This can be a constant number or an object that outputs a time varying value (like an LFO).  </p>\n\n<p><strong>param</strong> <em>type</em>: String. Default value is \"+\". How the modulation source should be applied to the property. Options are \"+\", \"-\", \"*\", \"++\", and \"=\". \"++\" means \nabsolute addition, where the absolute value of the modulation source is added to the property.  </p>\n\n<p><strong>param</strong> <em>scale</em>: Float. A scalar to multiply the output of the modulation source by before it is applied to the property.  </p>\n\n<h3 id=\"exampleusage\">Example Usage</h3>\n\n<p><code>graphics();\na = Cube({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    height: 50,\n});\nb = Drums('xoxo');\nf = Follow(b);\na.mod('sx', f, \"=\", 64);\na.spin(.01);</code></p>","removeMod":"<h3 id=\"geometryremovemodmethod\">Geometry.removeMod : method</h3>\n\n<p>Remove a modulation by name.</p>\n\n<h3 id=\"exampleusage\">Example Usage</h3>\n\n<p><code>graphics();\na = Cube({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    height: 50,\n});\na.mod('rx', .01);\na.removeMod('rx');</code></p>"},"properties":{"rotation":"<h3 id=\"geometryrotationproperty\">Geometry.rotation : property</h3>\n\n<p>Object. The rotation of the object in radians. There are x, y, and z properties to this property. There are four different ways to set this property:  </p>\n\n<p><code>geometry.rotation = 1; // the x,y and z rotations will all be set to 1\ngeometry.rotation = [0,1,0]; // the rotation along the x and z axis will be set to 0, y will be 1\ngeometry.rotation = {x:0, y:1, z:0};\ngeometry.rotation.x = 1; // only the rotation on the x axis is changed</code></p>","position":"<h3 id=\"geometrypositionproperty\">Geometry.position : property</h3>\n\n<p>Object. The position of the object. There are x, y, and z properties to this property. There are four different ways to set this property:  </p>\n\n<p><code>geometry.position = 0; // the x,y and z position will all be set to 0. This will center the object.\ngeometry.position = [0,50,0]; // y is 50, x and z are 0\ngeometry.position = {x:0, y:50, z:0};\ngeometry.position.x = 50; // only the position on the x axis is changed</code></p>","scale":"<h3 id=\"geometryscaleproperty\">Geometry.scale : property</h3>\n\n<p>Object. The scale of the object. There are x, y, and z properties to this property. There are four different ways to set this property:  </p>\n\n<p><code>geometry.scale = 1; // the x,y and z scale will all be set to 1.\ngeometry.scale = [2,4,2]; // y is 4, x and z are 2\ngeometry.scale = {x:1, y:2, z:1};\ngeometry.scale.x = 10; // only the scale on the x axis is changed</code></p>","fill":"<h3 id=\"geometryfillproperty\">Geometry.fill : property</h3>\n\n<p>Object. The color of light the geometry faces reflect. There are r, g, and b properties to this property. There are five different ways to set this property, including\nstrings. The recognized color names are: red, black, grey, white, green, blue, cyan, magenta, yellow, pink, orange, purple. Other ways to set the property are:  </p>\n\n<p><code>geometry.fill = 1; // the r,g and b properties will all be set to 1.\ngeometry.fill = [0,1,0]; // green\ngeometry.fill = {r:1, g:0, b:0}; // red\ngeometry.fill.r = 1; // only the red amount is changed\ngeometry.fill = \"purple\";</code></p>","stroke":"<h3 id=\"geometrystrokeproperty\">Geometry.stroke : property</h3>\n\n<p>Object. The color of light the geometry wireframe reflects. This property only works if a stroke color is set upon initialization, otherwise no wireframe is created.\nThere are r, g, and b properties to this property. There are five different ways to set this property, including\nstrings. The recognized color names are: red, black, grey, white, green, blue, cyan, magenta, yellow, pink, orange, purple. Other ways to set the property are:  </p>\n\n<p><code>geometry.stroke = 1; // the r,g and b properties will all be set to 1.\ngeometry.stroke = [0,1,0]; // green\ngeometry.stroke = {r:1, g:0, b:0}; // red\ngeometry.stroke.r = 1; // only the red amount is changed\ngeometry.stroke = \"purple\";</code></p>"},"type":" Geometry"},"Icosahedron":{"text":"<h1 id=\"icosahedrongeometry\">Icosahedron </h1>\n\n<p>A twenty sided 3D geometry. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Icosahedron({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    radius: 50,\n    detail:0\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are two extra constructor properties that can be set \n'radius' and 'detail'.</p>","methods":{},"properties":{"radius":"<h3 id=\"icosahedronradiusproperty\">Icosahedron.radius : property</h3>\n\n<p>Float. The size of the icosahedron. This can only be set in a dictionary passed to the constructor method. You can change the size of the object using the scale property\nafter the object has been created.    </p>","detail":"<h3 id=\"icosahedrondetailproperty\">Icosahedron.detail : property</h3>\n\n<p>Integer. The number of times each face in the icosahedron is subdivided into 4 triangles. For example, an icosahedron with a detail of\n2 would have 320 faces (20 > 80 > 320).</p>"},"type":" Geometry"},"Octahedron":{"text":"<h1 id=\"octahedrongeometry\">Octahedron </h1>\n\n<p>An eight sided 3D geometry. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Octahedron({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    radius: 50,\n    detail:0\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are two extra constructor properties that can be set \n'radius' and 'detail'.</p>","methods":{},"properties":{"radius":"<h3 id=\"octahedronradiusproperty\">Octahedron.radius : property</h3>\n\n<p>Float. The size of the octahedron. This can only be set in a dictionary passed to the constructor method. You can change the size of the object using the scale property\nafter the object has been created.    </p>","detail":"<h3 id=\"octahedrondetailproperty\">Octahedron.detail : property</h3>\n\n<p>Integer. The number of times each face in the octahedron is subdivided into 4 triangles. For example, an octahedron with a detail of\n2 would have 320 faces (20 > 80 > 320).</p>"},"type":" Geometry"},"Tetrahedron":{"text":"<h1 id=\"tetrahedrongeometry\">Tetrahedron </h1>\n\n<p>An eight sided 3D geometry. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Tetrahedron({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    radius: 50,\n    detail:0\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are two extra constructor properties that can be set \n'radius' and 'detail'.</p>","methods":{},"properties":{"radius":"<h3 id=\"tetrahedronradiusproperty\">Tetrahedron.radius : property</h3>\n\n<p>Float. The size of the icosahedron. This can only be set in a dictionary passed to the constructor method. You can change the size of the object using the scale property\nafter the object has been created.    </p>","detail":"<h3 id=\"tetrahedrondetailproperty\">Tetrahedron.detail : property</h3>\n\n<p>Integer. The number of times each face in the tetrahedron is subdivided into 4 triangles. For example, an tetrahedron with a detail of\n2 would have 320 faces (20 > 80 > 320).</p>"},"type":" Geometry"},"Sphere":{"text":"<h1 id=\"spheregeometry\">Sphere </h1>\n\n<p>An sphereical 3D geometry. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Sphere({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    radius: 50,\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are two extra constructor properties that can be set \n'radius', 'rings' and 'segments'. These can only be set in the constructor.</p>","methods":{},"properties":{"radius":"<h3 id=\"sphereradiusproperty\">Sphere.radius : property</h3>\n\n<p>Float. The size of the sphere. This can only be set in a dictionary passed to the constructor method. You can change the size of the object using the scale property\nafter the object has been created.    </p>","rings":"<h3 id=\"sphereringsproperty\">Sphere.rings : property</h3>\n\n<p>Integer. The vertical resolution of the sphere. This property can only be set in the constructor.</p>","segments":"<h3 id=\"spheresegmentsproperty\">Sphere.segments : property</h3>\n\n<p>Integer. The horizontal resolution of the sphere. This property can only be set in the constructor.</p>"},"type":" Geometry"},"Cube":{"text":"<h1 id=\"cubegeometry\">Cube </h1>\n\n<p>An cubical 3D geometry. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cube({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    height: 50,\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are two extra constructor properties that can be set \n'width', 'height' and 'depth'. These can only be set in the constructor.</p>","methods":{},"properties":{"width":"<h3 id=\"cubewidthproperty\">Cube.width : property</h3>\n\n<p>Float. The size of the cube along the x axis. This property can only be set in the constructor.</p>","height":"<h3 id=\"cubeheightproperty\">Cube.height : property</h3>\n\n<p>Float. The size of the cube along the y axis. This property can only be set in the constructor.</p>","depth":"<h3 id=\"cubedepthproperty\">Cube.depth : property</h3>\n\n<p>Float. The size of the cube along the z axis. This property can only be set in the constructor.    </p>"},"type":" Geometry"},"Cylinder":{"text":"<h1 id=\"cylindergeometry\">Cylinder </h1>\n\n<p>An cylindrical 3D geometry. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Cylinder({\n    fill: [1,0,0],\n    stroke:[.5,0,0],\n    height: 50,\n    radiusTop: 25,\n    radiusBottom: 25,\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are six extra constructor properties that can be set \n'radiusTop', 'radiusBottom', 'height', 'radiusSegments', 'heightSegments', 'openEnded'. These can only be set in the constructor.</p>","methods":{},"properties":{"height":"<h3 id=\"cylinderheightproperty\">Cylinder.height : property</h3>\n\n<p>Float. The height of the cylinder. This property can only be set in the constructor.</p>","radiusTop":"<h3 id=\"cylinderradiustopproperty\">Cylinder.radiusTop : property</h3>\n\n<p>Float. The width of the cylinder at the top. This property can only be set in the constructor</p>","radiusBottom":"<h3 id=\"cylinderradiusbottomproperty\">Cylinder.radiusBottom : property</h3>\n\n<p>Float. The width of the cylinder at the bottom. This property can only be set in the constructor</p>","heightSegments":"<h3 id=\"cylinderheightsegmentsproperty\">Cylinder.heightSegments : property</h3>\n\n<p>Integer. The number of segments along the vertical axis. Default is 1 and should probably be left that way unless you plan to do some type\nof vertices deformation. This property can only be set in the constructor.</p>","radiusSegments":"<h3 id=\"cylinderradiussegmentsproperty\">Cylinder.radiusSegments : property</h3>\n\n<p>Integer. The number of segments around the vertical axis. Default is 8. This property can only be set in the constructor.</p>","openEnded":"<h3 id=\"cylinderopenendedproperty\">Cylinder.openEnded : property</h3>\n\n<p>Boolean. Default true. Whether or not the cylinder appears hollow. This property can only be set in the constructor.</p>"},"type":" Geometry"},"Torus":{"text":"<h1 id=\"torusgeometry\">Torus </h1>\n\n<p>A 3D ring. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Torus({\n  fill:[1,0,0],\n  stroke:[.5,0,0],\n  scale:.75,\n  tube:10,\n  tubularSegments:16\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are five extra constructor properties that can be set \n'radius', 'tube', 'radialSegments', 'tubularSegments', 'arc'. These can only be set in the constructor.</p>","methods":{},"properties":{"tube":"<h3 id=\"torustubeproperty\">Torus.tube : property</h3>\n\n<p>Float. The thickness of the tube that the ring is composed of. This property can only be set in the constructor</p>","radius":"<h3 id=\"torusradiusproperty\">Torus.radius : property</h3>\n\n<p>Float. The overall size of the torus geometry. This property can only be set in the constructor</p>","radialSegments":"<h3 id=\"torusradialsegmentsproperty\">Torus.radialSegments : property</h3>\n\n<p>Integer. The resolution traveling around the geometry. This property can only be set in the constructor</p>","tubularSegments":"<h3 id=\"torustubularsegmentsproperty\">Torus.tubularSegments : property</h3>\n\n<p>Integer. The resolution of the tube. This property can only be set in the constructor</p>","arc":"<h3 id=\"torusarcproperty\">Torus.arc : property</h3>\n\n<p>Float. The size of the arc created by the torus. Default is 2PI (a ring). Interesting patterns can be made using higher values.</p>"},"type":" Geometry"},"Knot":{"text":"<h1 id=\"knotgeometry\">Knot </h1>\n\n<p>A torus twisted into a knot. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Knot({\n  fill:[1,0,0],\n  stroke:[.5,0,0],\n  scale:.75,\n  tube:10,\n  tubularSegments:16\n});\na.spin(.01);</code></p>\n\n<h2 id=\"constructor\">Constructor</h2>\n\n<p><strong>param</strong> <em>properties</em>: Object. A dictionary of property names and values to set. There are six extra constructor properties that can be set \n'radius', 'tube', 'radialSegments', 'tubularSegments', 'p', 'q', 'scaleHeight'. These can only be set in the constructor.</p>","methods":{},"properties":{"tube":"<h3 id=\"knottubeproperty\">Knot.tube : property</h3>\n\n<p>Float. The thickness of the tube that the ring is composed of. This property can only be set in the constructor</p>","radius":"<h3 id=\"knotradiusproperty\">Knot.radius : property</h3>\n\n<p>Float. The overall size of the torus geometry. This property can only be set in the constructor</p>","radialSegments":"<h3 id=\"knotradialsegmentsproperty\">Knot.radialSegments : property</h3>\n\n<p>Integer. The resolution traveling around the geometry. This property can only be set in the constructor</p>","tubularSegments":"<h3 id=\"knottubularsegmentsproperty\">Knot.tubularSegments : property</h3>\n\n<p>Integer. The resolution of the tube. This property can only be set in the constructor</p>","p":"<h3 id=\"knotpproperty\">Knot.p : property</h3>\n\n<p>Float. Angular momentum along one axis.</p>","q":"<h3 id=\"knotqproperty\">Knot.q : property</h3>\n\n<p>Float. Angular momentum along another axis.</p>","scaleHeight":"<h3 id=\"knotscaleheightproperty\">Knot.scaleHeight : property</h3>\n\n<p>Float. Allows you to stretch the knot and create interesting elongated forms.</p>"},"type":" Geometry"},"Model":{"text":"<h1 id=\"modelgeometry\">Model </h1>\n\n<p>A 3D model loaded from an .obj file. See the <a href=\"javascript:Gibber.Environment.displayDocs('Geometry')\">Geometry</a> reference for details on properties and methods. </p>\n\n<h2 id=\"exampleusage\">Example Usage</h2>\n\n<p><code>graphics();\na = Model({\n  model : \"models/WaltHead.obj\",\n  fill:[1,0,0],\n  stroke:[.5,0,0],\n  scale:.75,\n});\na.spin(.01);</code></p>\n\n<p>/**###Model.model : property\nString. The path (starting from the main Gibber directory) to the .obj file to load. Can only be set in constructor.</p>","methods":{},"properties":{},"type":" Geometry"}}